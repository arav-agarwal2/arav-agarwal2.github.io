{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Notes on Coffee, Books, and Programming"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Last Time: We started to talk about Rust. As a recap: Rust is an imperative language, so it has reference semantics with side effects on…","fields":{"slug":"/EECS490/21/"},"frontmatter":{"date":"Mar 30, 2020 4:30 PM","title":"Ownership and Borrowing in Rust 2 (EECS490Lec21)","description":"A Syntactic Boogaloo"}}},{"node":{"excerpt":"So far, we’ve been assuming automatic memory management. If we have the following function: So here, when counter is stops being used, (i.e…","fields":{"slug":"/EECS490/20/"},"frontmatter":{"date":"Mar 30, 2020 2:08 PM","title":"Rust, and the Case of Memory Management (EECS490Lec20)","description":"(Ownership and Borrowing in Rust)"}}},{"node":{"excerpt":"I was not present for Lecture 18, which did not get recorded, unfortunately. Thus, this will focus on Lecture 18/19’s content, but might be…","fields":{"slug":"/EECS490/1819/"},"frontmatter":{"date":"Mar 30, 2020 12:28 PM","title":"Reasoning about side-effects (EECS490Lec18,19)","description":" "}}},{"node":{"excerpt":"Last time, we covered working with memory in our language,  and made it into an imperative programing language.  Cyrus then goes through a…","fields":{"slug":"/EECS490/17/"},"frontmatter":{"date":"Mar 30, 2020 10:32 AM","title":"What's Next? (EECS490Lec17)","description":"or what happens when mutability exists to our poor reasoning!"}}},{"node":{"excerpt":"So last time, we worked with references and got the formalism behind working with memory allocation / reading and writing. Now, let’s make…","fields":{"slug":"/EECS490/16/"},"frontmatter":{"date":"Mar 29, 2020 5:35 PM","title":"Mutability Part 2 (EECS490Lec16)","description":" "}}},{"node":{"excerpt":"So so far, we’ve been programming with pure expressions, without any changeable state. So, to reason about a function, we simply had to…","fields":{"slug":"/EECS490/15/"},"frontmatter":{"date":"Mar 29, 2020 12:58 PM","title":"Mutation and References (EECS490Lec15)","description":" "}}},{"node":{"excerpt":"Part 1: Gatsby Building Blocks After creating the “hello world” site from the gatsby-cli, there are many such starters that allow you to…","fields":{"slug":"/NotesOnGatsby/"},"frontmatter":{"date":"Jun 02, 2020 4:44 PM","title":"Gatsby Development 101 - A Condensed Tutorial","description":"A condensed version of the standard Gatsby tutorial"}}},{"node":{"excerpt":"So, over the last few lectures we’ve covered the ideas of parallelism.  In particular, we’ve covered the ideas about determinism, where it…","fields":{"slug":"/EECS490/24/"},"frontmatter":{"date":"Apr 13, 2020 1:14 PM","title":"Distributed Computing (EECS490Lec24)","description":"A messy affair"}}},{"node":{"excerpt":"Last time, we talked about parallelism. The goal of parallelism is all about using the fact that certain operations are data-independent…","fields":{"slug":"/EECS490/23/"},"frontmatter":{"date":"Apr 13, 2020 10:04 AM","title":"Concurrency - Parallelism Unbound (EECS490Lec23)","description":" "}}},{"node":{"excerpt":"Firstly, let’s nail down what parallelism is. Parallelism is, namely, a performance  optimization. By running multiple things at the same…","fields":{"slug":"/EECS490/22/"},"frontmatter":{"date":"Apr 02, 2020 3:41 PM","title":"Parallelism and Cost Semantics (EECS490Lec22)","description":"or a careful exploration of parallelism, and when it's useful"}}}]}},"pageContext":{}}}