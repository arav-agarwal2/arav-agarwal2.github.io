{"expireTime":9007200846135024000,"key":"transformer-remark-markdown-html-ast-3d4460fec5543e883c595e32f4ce1c92-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Firstly, let’s nail down what parallelism is. Parallelism is, namely, a performance  optimization. By running multiple things ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":127,"offset":127}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"at the same time","position":{"start":{"line":2,"column":129,"offset":129},"end":{"line":2,"column":145,"offset":145}}}],"position":{"start":{"line":2,"column":127,"offset":127},"end":{"line":2,"column":147,"offset":147}}},{"type":"text","value":", we’re able to get stuff done quickly. ","position":{"start":{"line":2,"column":147,"offset":147},"end":{"line":2,"column":187,"offset":187}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":187,"offset":187}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, while that’s a great idea in theory, in practice we simply cannot run all lines at the same time. If we consider the following program, for example:","position":{"start":{"line":4,"column":1,"offset":189},"end":{"line":4,"column":154,"offset":342}}}],"position":{"start":{"line":4,"column":1,"offset":189},"end":{"line":4,"column":154,"offset":342}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x be e1 <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">let</span> y be e2 <span class=\"token keyword\">in</span>\ne3</code></pre></div>","position":{"start":{"line":6,"column":1,"offset":344},"end":{"line":10,"column":4,"offset":389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"where e3 depends on both e1 and e2. ","position":{"start":{"line":12,"column":1,"offset":391},"end":{"line":12,"column":37,"offset":427}}}],"position":{"start":{"line":12,"column":1,"offset":391},"end":{"line":12,"column":37,"offset":427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we were to blindly run the first two lines in parallel, we could easily run into trouble. If ","position":{"start":{"line":14,"column":1,"offset":429},"end":{"line":14,"column":97,"offset":525}}},{"type":"raw","value":"<code class=\"language-text\">e1</code>","position":{"start":{"line":14,"column":97,"offset":525},"end":{"line":14,"column":101,"offset":529}}},{"type":"text","value":" depended on ","position":{"start":{"line":14,"column":101,"offset":529},"end":{"line":14,"column":114,"offset":542}}},{"type":"raw","value":"<code class=\"language-text\">y</code>","position":{"start":{"line":14,"column":114,"offset":542},"end":{"line":14,"column":117,"offset":545}}},{"type":"text","value":" or ","position":{"start":{"line":14,"column":117,"offset":545},"end":{"line":14,"column":121,"offset":549}}},{"type":"raw","value":"<code class=\"language-text\">e2</code>","position":{"start":{"line":14,"column":121,"offset":549},"end":{"line":14,"column":125,"offset":553}}},{"type":"text","value":" depended on ","position":{"start":{"line":14,"column":125,"offset":553},"end":{"line":14,"column":138,"offset":566}}},{"type":"raw","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":14,"column":138,"offset":566},"end":{"line":14,"column":141,"offset":569}}},{"type":"text","value":" , or if either line had some sort of side-effect, we could easily create a non-deterministic program, depending on your scheduler. (However, if ","position":{"start":{"line":14,"column":141,"offset":569},"end":{"line":14,"column":286,"offset":714}}},{"type":"raw","value":"<code class=\"language-text\">e1</code>","position":{"start":{"line":14,"column":286,"offset":714},"end":{"line":14,"column":290,"offset":718}}},{"type":"text","value":" and ","position":{"start":{"line":14,"column":290,"offset":718},"end":{"line":14,"column":295,"offset":723}}},{"type":"raw","value":"<code class=\"language-text\">e2</code>","position":{"start":{"line":14,"column":295,"offset":723},"end":{"line":14,"column":299,"offset":727}}},{"type":"text","value":" have no side effects or data dependency then they’d be trivially parallelisable, which is the motivation behind stuff like MapReduce)","position":{"start":{"line":14,"column":299,"offset":727},"end":{"line":14,"column":433,"offset":861}}}],"position":{"start":{"line":14,"column":1,"offset":429},"end":{"line":14,"column":433,"offset":861}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thus, while we’d like to have our programs automatically run in parallel, it’s probably for the best we give the program some functionality regarding parallelism instead, and let the programmer handle the nontrivial parallelisation. To do so, let’s introduce the first kind of parallelism we’d like to study: Fork-Join Parallelism","position":{"start":{"line":16,"column":1,"offset":863},"end":{"line":16,"column":331,"offset":1193}}}],"position":{"start":{"line":16,"column":1,"offset":863},"end":{"line":16,"column":331,"offset":1193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":18,"column":1,"offset":1195},"end":{"line":18,"column":4,"offset":1198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Fork-Join Parallelism","position":{"start":{"line":20,"column":3,"offset":1202},"end":{"line":20,"column":24,"offset":1223}}}],"position":{"start":{"line":20,"column":1,"offset":1200},"end":{"line":20,"column":24,"offset":1223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, the idea behind fork and join parallelism is rather simple. If we have a program, like the above statement, where we knew we could run two things in parallel, we could start a program that runs both of the sub-programs in parallel ( a fork ), and a program that takes both of the sub-programs and combines them for ","position":{"start":{"line":22,"column":1,"offset":1225},"end":{"line":22,"column":322,"offset":1546}}},{"type":"raw","value":"<code class=\"language-text\">e3</code>","position":{"start":{"line":22,"column":322,"offset":1546},"end":{"line":22,"column":326,"offset":1550}}},{"type":"text","value":"  ( a join ). With both of these constructs, we’d be able to give the programmer the ability to run both programs at once, like the diagram below:","position":{"start":{"line":22,"column":326,"offset":1550},"end":{"line":22,"column":472,"offset":1696}}}],"position":{"start":{"line":22,"column":1,"offset":1225},"end":{"line":22,"column":472,"offset":1696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"../assets/Capture.png","alt":"../22/Capture.png"},"children":[],"position":{"start":{"line":24,"column":1,"offset":1698},"end":{"line":24,"column":44,"offset":1741}}}],"position":{"start":{"line":24,"column":1,"offset":1698},"end":{"line":24,"column":44,"offset":1741}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thus, when we run the sections in parallel, and then join them, our program’s execution, hopefully, is not changed, and we’re able to get some performance benefits, though it’s still a bit hard to say what sorts of performance benefits we get out of this, so let’s make it clear.","position":{"start":{"line":26,"column":1,"offset":1743},"end":{"line":26,"column":280,"offset":2022}}}],"position":{"start":{"line":26,"column":1,"offset":1743},"end":{"line":26,"column":280,"offset":2022}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Firstly, this doesn’t change the total amount of ","position":{"start":{"line":28,"column":3,"offset":2026},"end":{"line":28,"column":52,"offset":2075}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"work","position":{"start":{"line":28,"column":53,"offset":2076},"end":{"line":28,"column":57,"offset":2080}}}],"position":{"start":{"line":28,"column":52,"offset":2075},"end":{"line":28,"column":58,"offset":2081}}},{"type":"text","value":" in the program. We change how the computational steps are processed; we do not change the amount of work we do.","position":{"start":{"line":28,"column":58,"offset":2081},"end":{"line":28,"column":170,"offset":2193}}}],"position":{"start":{"line":28,"column":1,"offset":2024},"end":{"line":28,"column":170,"offset":2193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"However, because we change the order of execution, we change the ","position":{"start":{"line":29,"column":3,"offset":2196},"end":{"line":29,"column":68,"offset":2261}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"depth","position":{"start":{"line":29,"column":69,"offset":2262},"end":{"line":29,"column":74,"offset":2267}}}],"position":{"start":{"line":29,"column":68,"offset":2261},"end":{"line":29,"column":75,"offset":2268}}},{"type":"text","value":" of the program, which is the amount of work on the critical path through the graph. This is essentially the work that’ll determine the time our program takes to run, and thus is what we wish to optimize to speed up our programs.","position":{"start":{"line":29,"column":75,"offset":2268},"end":{"line":29,"column":304,"offset":2497}}}],"position":{"start":{"line":29,"column":1,"offset":2194},"end":{"line":29,"column":304,"offset":2497}}},{"type":"text","value":"\n"}],"position":{"start":{"line":28,"column":1,"offset":2024},"end":{"line":29,"column":304,"offset":2497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It turns out, we can compute these expressions (  ","position":{"start":{"line":31,"column":1,"offset":2499},"end":{"line":31,"column":51,"offset":2549}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"work","position":{"start":{"line":31,"column":52,"offset":2550},"end":{"line":31,"column":56,"offset":2554}}}],"position":{"start":{"line":31,"column":51,"offset":2549},"end":{"line":31,"column":57,"offset":2555}}},{"type":"text","value":" and ","position":{"start":{"line":31,"column":57,"offset":2555},"end":{"line":31,"column":62,"offset":2560}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"depth","position":{"start":{"line":31,"column":63,"offset":2561},"end":{"line":31,"column":68,"offset":2566}}}],"position":{"start":{"line":31,"column":62,"offset":2560},"end":{"line":31,"column":69,"offset":2567}}},{"type":"text","value":" ) through an underlying ","position":{"start":{"line":31,"column":69,"offset":2567},"end":{"line":31,"column":94,"offset":2592}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"cost semantics","position":{"start":{"line":31,"column":95,"offset":2593},"end":{"line":31,"column":109,"offset":2607}}}],"position":{"start":{"line":31,"column":94,"offset":2592},"end":{"line":31,"column":110,"offset":2608}}},{"type":"text","value":", which is a fancy way we can formalize the time complexity of a set of operations:","position":{"start":{"line":31,"column":110,"offset":2608},"end":{"line":31,"column":193,"offset":2691}}}],"position":{"start":{"line":31,"column":1,"offset":2499},"end":{"line":31,"column":193,"offset":2691}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Cost Semantics:","position":{"start":{"line":33,"column":2,"offset":2694},"end":{"line":33,"column":17,"offset":2709}}}],"position":{"start":{"line":33,"column":1,"offset":2693},"end":{"line":33,"column":18,"offset":2710}}},{"type":"text","value":"  A way for us to describe the ","position":{"start":{"line":33,"column":18,"offset":2710},"end":{"line":33,"column":49,"offset":2741}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"work","position":{"start":{"line":33,"column":50,"offset":2742},"end":{"line":33,"column":54,"offset":2746}}}],"position":{"start":{"line":33,"column":49,"offset":2741},"end":{"line":33,"column":55,"offset":2747}}},{"type":"text","value":" and ","position":{"start":{"line":33,"column":55,"offset":2747},"end":{"line":33,"column":60,"offset":2752}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"depth","position":{"start":{"line":33,"column":61,"offset":2753},"end":{"line":33,"column":66,"offset":2758}}}],"position":{"start":{"line":33,"column":60,"offset":2752},"end":{"line":33,"column":67,"offset":2759}}},{"type":"text","value":" of a program, given “costs” which, for this class, are values associated with the number of operations (i.e. the time) we need to take for some operation to be complete. ","position":{"start":{"line":33,"column":67,"offset":2759},"end":{"line":33,"column":238,"offset":2930}}}],"position":{"start":{"line":33,"column":1,"offset":2693},"end":{"line":33,"column":238,"offset":2930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, for example, let’s say we gave the cost of starting the program as ","position":{"start":{"line":35,"column":1,"offset":2932},"end":{"line":35,"column":72,"offset":3003}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":35,"column":72,"offset":3003},"end":{"line":35,"column":75,"offset":3006}}},{"type":"text","value":" , the cost of ","position":{"start":{"line":35,"column":75,"offset":3006},"end":{"line":35,"column":90,"offset":3021}}},{"type":"raw","value":"<code class=\"language-text\">let x be e1</code>","position":{"start":{"line":35,"column":90,"offset":3021},"end":{"line":35,"column":103,"offset":3034}}},{"type":"text","value":" as 2, the cost of ","position":{"start":{"line":35,"column":103,"offset":3034},"end":{"line":35,"column":122,"offset":3053}}},{"type":"raw","value":"<code class=\"language-text\">let y be e2</code>","position":{"start":{"line":35,"column":122,"offset":3053},"end":{"line":35,"column":135,"offset":3066}}},{"type":"text","value":" as 3, and the cost of computing  ","position":{"start":{"line":35,"column":135,"offset":3066},"end":{"line":35,"column":169,"offset":3100}}},{"type":"raw","value":"<code class=\"language-text\">e3</code>","position":{"start":{"line":35,"column":169,"offset":3100},"end":{"line":35,"column":173,"offset":3104}}},{"type":"text","value":"  as ","position":{"start":{"line":35,"column":173,"offset":3104},"end":{"line":35,"column":178,"offset":3109}}},{"type":"raw","value":"<code class=\"language-text\">1</code>","position":{"start":{"line":35,"column":178,"offset":3109},"end":{"line":35,"column":181,"offset":3112}}},{"type":"text","value":" . ","position":{"start":{"line":35,"column":181,"offset":3112},"end":{"line":35,"column":184,"offset":3115}}}],"position":{"start":{"line":35,"column":1,"offset":2932},"end":{"line":35,"column":184,"offset":3115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this case, the work is simply the number of operations we need to compute, so it’s the sum of all of our costs, namely ","position":{"start":{"line":37,"column":1,"offset":3117},"end":{"line":37,"column":123,"offset":3239}}},{"type":"raw","value":"<code class=\"language-text\">1+2+3+1</code>","position":{"start":{"line":37,"column":123,"offset":3239},"end":{"line":37,"column":132,"offset":3248}}},{"type":"text","value":" , or ","position":{"start":{"line":37,"column":132,"offset":3248},"end":{"line":37,"column":138,"offset":3254}}},{"type":"raw","value":"<code class=\"language-text\">7</code>","position":{"start":{"line":37,"column":138,"offset":3254},"end":{"line":37,"column":141,"offset":3257}}},{"type":"text","value":" .","position":{"start":{"line":37,"column":141,"offset":3257},"end":{"line":37,"column":143,"offset":3259}}}],"position":{"start":{"line":37,"column":1,"offset":3117},"end":{"line":37,"column":143,"offset":3259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, the depth for this process is the length of the largest path from the start of computation to the end of computation. In this case, it’s going to be ","position":{"start":{"line":39,"column":1,"offset":3261},"end":{"line":39,"column":159,"offset":3419}}},{"type":"raw","value":"<code class=\"language-text\">1 + max(2,3) + 1</code>","position":{"start":{"line":39,"column":159,"offset":3419},"end":{"line":39,"column":177,"offset":3437}}},{"type":"text","value":" , which is ","position":{"start":{"line":39,"column":177,"offset":3437},"end":{"line":39,"column":189,"offset":3449}}},{"type":"raw","value":"<code class=\"language-text\">4</code>","position":{"start":{"line":39,"column":189,"offset":3449},"end":{"line":39,"column":192,"offset":3452}}},{"type":"text","value":" . ","position":{"start":{"line":39,"column":192,"offset":3452},"end":{"line":39,"column":195,"offset":3455}}}],"position":{"start":{"line":39,"column":1,"offset":3261},"end":{"line":39,"column":195,"offset":3455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thus, with fork-join parallelism, we’re able to get a performance increase, while still hacing the same amount of work.","position":{"start":{"line":41,"column":1,"offset":3457},"end":{"line":41,"column":120,"offset":3576}}}],"position":{"start":{"line":41,"column":1,"offset":3457},"end":{"line":41,"column":120,"offset":3576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As we can see, by quantifying the explicit parallel costs for this program, we can calculate the approximate speedup of our program, and see if it’s worth putting our original program in parallel in this manner, as sometimes you’ll want to use a different syntax or a different system to speedup your program. ","position":{"start":{"line":43,"column":1,"offset":3578},"end":{"line":43,"column":311,"offset":3888}}}],"position":{"start":{"line":43,"column":1,"offset":3578},"end":{"line":43,"column":311,"offset":3888}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Key Idea: Scheduling doesn’t change the ","position":{"start":{"line":45,"column":1,"offset":3890},"end":{"line":45,"column":41,"offset":3930}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"computation","position":{"start":{"line":45,"column":43,"offset":3932},"end":{"line":45,"column":54,"offset":3943}}}],"position":{"start":{"line":45,"column":41,"offset":3930},"end":{"line":45,"column":56,"offset":3945}}},{"type":"text","value":", but it does change ","position":{"start":{"line":45,"column":56,"offset":3945},"end":{"line":45,"column":77,"offset":3966}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"performance","position":{"start":{"line":45,"column":79,"offset":3968},"end":{"line":45,"column":90,"offset":3979}}}],"position":{"start":{"line":45,"column":77,"offset":3966},"end":{"line":45,"column":92,"offset":3981}}},{"type":"text","value":", depending on your system and your constructs.","position":{"start":{"line":45,"column":92,"offset":3981},"end":{"line":45,"column":139,"offset":4028}}}],"position":{"start":{"line":45,"column":1,"offset":3890},"end":{"line":45,"column":139,"offset":4028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, this wouldn’t be a 490 class if we didn’t try to extend this useful concept to ALFA, so let’s add it in and see what happens!","position":{"start":{"line":47,"column":1,"offset":4030},"end":{"line":47,"column":131,"offset":4160}}}],"position":{"start":{"line":47,"column":1,"offset":4030},"end":{"line":47,"column":131,"offset":4160}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":49,"column":1,"offset":4162},"end":{"line":49,"column":4,"offset":4165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Onto the formalism for forking and joining","position":{"start":{"line":51,"column":5,"offset":4171},"end":{"line":51,"column":47,"offset":4213}}}],"position":{"start":{"line":51,"column":1,"offset":4167},"end":{"line":51,"column":47,"offset":4213}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, we’ll create a new language ALFA + Forks, which will denote ALFA with a forking construct. ","position":{"start":{"line":53,"column":1,"offset":4215},"end":{"line":53,"column":96,"offset":4310}}}],"position":{"start":{"line":53,"column":1,"offset":4215},"end":{"line":53,"column":96,"offset":4310}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For once, we don’t need to add anything to our type system. As we’re changing the computation we perform / we can perform, we only need to add something to our expression language, which tells us that we’re about to run two statements in parallel:","position":{"start":{"line":55,"column":1,"offset":4312},"end":{"line":55,"column":248,"offset":4559}}}],"position":{"start":{"line":55,"column":1,"offset":4312},"end":{"line":55,"column":248,"offset":4559}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">e <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token operator\">|</span> <span class=\"token module variable\">Fork</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>e3<span class=\"token punctuation\">)</span>               fork x<span class=\"token operator\">=</span>e1 <span class=\"token operator\">and</span> y<span class=\"token operator\">=</span>e2 <span class=\"token keyword\">in</span> e3</code></pre></div>","position":{"start":{"line":57,"column":1,"offset":4561},"end":{"line":60,"column":4,"offset":4648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we’ve added a term to our expression language, we’ll obviously need to figure out the static semantics of such a term, which are the following:","position":{"start":{"line":62,"column":1,"offset":4650},"end":{"line":62,"column":153,"offset":4802}}}],"position":{"start":{"line":62,"column":1,"offset":4650},"end":{"line":62,"column":153,"offset":4802}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"$","position":{"start":{"line":64,"column":1,"offset":4804},"end":{"line":64,"column":2,"offset":4805}}},{"type":"raw","value":"<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected &#x27;}&#x27;, got &#x27;EOF&#x27; at end of input: …\\text{ fork x =\" style=\"color:#cc0000\">\\frac{\\Gamma \\vdash e_1 : \\tau_1 \\text{\\ \\ \\ } \\Gamma \\vdash e_2 : \\tau_2 \\text{\\ \\ \\ } \\Gamma, x: \\tau_1, y: \\tau_2 \\vdash e_3 : \\tau }{\\Gamma \\vdash \\text{ fork x =</span>","position":{"start":{"line":64,"column":2,"offset":4805},"end":{"line":64,"column":171,"offset":4974}}},{"type":"text","value":"e","position":{"start":{"line":64,"column":171,"offset":4974},"end":{"line":64,"column":172,"offset":4975}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"1","position":{"start":{"line":64,"column":173,"offset":4976},"end":{"line":64,"column":174,"offset":4977}}},{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>d</mi><mi>y</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">and y=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span></span>","position":{"start":{"line":64,"column":174,"offset":4977},"end":{"line":64,"column":183,"offset":4986}}},{"type":"text","value":"e","position":{"start":{"line":64,"column":183,"offset":4986},"end":{"line":64,"column":184,"offset":4987}}}],"position":{"start":{"line":64,"column":172,"offset":4975},"end":{"line":64,"column":185,"offset":4988}}},{"type":"text","value":"2","position":{"start":{"line":64,"column":185,"offset":4988},"end":{"line":64,"column":186,"offset":4989}}},{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span></span></span></span></span>","position":{"start":{"line":64,"column":186,"offset":4989},"end":{"line":64,"column":192,"offset":4995}}},{"type":"text","value":"e_3","position":{"start":{"line":64,"column":192,"offset":4995},"end":{"line":64,"column":195,"offset":4998}}},{"type":"raw","value":"<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected &#x27;EOF&#x27;, got &#x27;}&#x27; at position 1: }̲:\\tau}\" style=\"color:#cc0000\">}:\\tau}</span>","position":{"start":{"line":64,"column":195,"offset":4998},"end":{"line":64,"column":204,"offset":5007}}},{"type":"text","value":"$","position":{"start":{"line":64,"column":204,"offset":5007},"end":{"line":64,"column":205,"offset":5008}}}],"position":{"start":{"line":64,"column":1,"offset":4804},"end":{"line":64,"column":205,"offset":5008}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This makes sense, as we’re running two expressions in parallel, which must have some type, and then let-binding them into a third expression, which should have consistent type given the types for ","position":{"start":{"line":66,"column":1,"offset":5010},"end":{"line":66,"column":197,"offset":5206}}},{"type":"raw","value":"<code class=\"language-text\">e1</code>","position":{"start":{"line":66,"column":197,"offset":5206},"end":{"line":66,"column":201,"offset":5210}}},{"type":"text","value":" and ","position":{"start":{"line":66,"column":201,"offset":5210},"end":{"line":66,"column":206,"offset":5215}}},{"type":"raw","value":"<code class=\"language-text\">e2</code>","position":{"start":{"line":66,"column":206,"offset":5215},"end":{"line":66,"column":210,"offset":5219}}}],"position":{"start":{"line":66,"column":1,"offset":5010},"end":{"line":66,"column":210,"offset":5219}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Cyrus also makes it a special point that the design of the assumptions of this rule are very intentional, in that we have the same initial context for our execution of e1 and e2. By doing that, we’re enforce that the contexts for both are the same, so when a programmer uses this construct, they have to intend for the two branches to have no dependencies, which is what they intended.","position":{"start":{"line":68,"column":1,"offset":5221},"end":{"line":68,"column":386,"offset":5606}}}],"position":{"start":{"line":68,"column":1,"offset":5221},"end":{"line":68,"column":386,"offset":5606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Besides the static semantics for the expression, we’d also like to have the dynamic semantics for it which, for the evaluation rule, is the following:","position":{"start":{"line":70,"column":1,"offset":5608},"end":{"line":70,"column":151,"offset":5758}}}],"position":{"start":{"line":70,"column":1,"offset":5608},"end":{"line":70,"column":151,"offset":5758}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"$","position":{"start":{"line":72,"column":1,"offset":5760},"end":{"line":72,"column":2,"offset":5761}}},{"type":"raw","value":"<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected &#x27;}&#x27;, got &#x27;EOF&#x27; at end of input: …{\\text{fork x =\" style=\"color:#cc0000\">\\frac{e_1 \\Downarrow v_1 \\text{\\ \\ \\ } e_2 \\Downarrow v_2 \\text{\\ \\ \\ } [\\frac{v_1}{x}, \\frac{v_2}{y}]e_3 \\Downarrow v_3}{\\text{fork x =</span>","position":{"start":{"line":72,"column":2,"offset":5761},"end":{"line":72,"column":141,"offset":5900}}},{"type":"text","value":"e","position":{"start":{"line":72,"column":141,"offset":5900},"end":{"line":72,"column":142,"offset":5901}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"1","position":{"start":{"line":72,"column":143,"offset":5902},"end":{"line":72,"column":144,"offset":5903}}},{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo separator=\"true\">,</mo><mi>y</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">, y=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span></span>","position":{"start":{"line":72,"column":144,"offset":5903},"end":{"line":72,"column":150,"offset":5909}}},{"type":"text","value":"e","position":{"start":{"line":72,"column":150,"offset":5909},"end":{"line":72,"column":151,"offset":5910}}}],"position":{"start":{"line":72,"column":142,"offset":5901},"end":{"line":72,"column":152,"offset":5911}}},{"type":"text","value":"2","position":{"start":{"line":72,"column":152,"offset":5911},"end":{"line":72,"column":153,"offset":5912}}},{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span></span></span></span></span>","position":{"start":{"line":72,"column":153,"offset":5912},"end":{"line":72,"column":159,"offset":5918}}},{"type":"text","value":"e","position":{"start":{"line":72,"column":159,"offset":5918},"end":{"line":72,"column":160,"offset":5919}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"3 \\Downarrow v","position":{"start":{"line":72,"column":161,"offset":5920},"end":{"line":72,"column":175,"offset":5934}}}],"position":{"start":{"line":72,"column":160,"offset":5919},"end":{"line":72,"column":176,"offset":5935}}},{"type":"text","value":"3","position":{"start":{"line":72,"column":176,"offset":5935},"end":{"line":72,"column":177,"offset":5936}}},{"type":"raw","value":"<span class=\"katex-error\" title=\"ParseError: KaTeX parse error: Expected &#x27;EOF&#x27;, got &#x27;}&#x27; at position 1: }̲}\" style=\"color:#cc0000\">}}</span>","position":{"start":{"line":72,"column":177,"offset":5936},"end":{"line":72,"column":182,"offset":5941}}},{"type":"text","value":"$","position":{"start":{"line":72,"column":182,"offset":5941},"end":{"line":72,"column":183,"offset":5942}}}],"position":{"start":{"line":72,"column":1,"offset":5760},"end":{"line":72,"column":183,"offset":5942}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Again, this makes sense as, for the sake of ","position":{"start":{"line":74,"column":1,"offset":5944},"end":{"line":74,"column":45,"offset":5988}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"correctness","position":{"start":{"line":74,"column":47,"offset":5990},"end":{"line":74,"column":58,"offset":6001}}}],"position":{"start":{"line":74,"column":45,"offset":5988},"end":{"line":74,"column":60,"offset":6003}}},{"type":"text","value":", we simply need to evaluate both sub-expressions and then subsitute the results into the join expression. ","position":{"start":{"line":74,"column":60,"offset":6003},"end":{"line":74,"column":167,"offset":6110}}}],"position":{"start":{"line":74,"column":1,"offset":5944},"end":{"line":74,"column":167,"offset":6110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, while all of our previous formalism gave us amazing results when it comes to proving correctness, it does not tell us anything about the new functionality of this operation ( after all, one could say this looks like a very complicated let pair expression ), namely that the operations are done in ","position":{"start":{"line":76,"column":1,"offset":6112},"end":{"line":76,"column":307,"offset":6418}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"parallel","position":{"start":{"line":76,"column":308,"offset":6419},"end":{"line":76,"column":316,"offset":6427}}}],"position":{"start":{"line":76,"column":307,"offset":6418},"end":{"line":76,"column":317,"offset":6428}}},{"type":"text","value":". To reason about that, then, we’d like to have a new judgement, that allows us to write about the ","position":{"start":{"line":76,"column":317,"offset":6428},"end":{"line":76,"column":416,"offset":6527}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"costs","position":{"start":{"line":76,"column":417,"offset":6528},"end":{"line":76,"column":422,"offset":6533}}}],"position":{"start":{"line":76,"column":416,"offset":6527},"end":{"line":76,"column":423,"offset":6534}}},{"type":"text","value":" of computations, so we can, eventually, reason about how much better parallelising some operation is versus not parallelising it. ","position":{"start":{"line":76,"column":423,"offset":6534},"end":{"line":76,"column":554,"offset":6665}}}],"position":{"start":{"line":76,"column":1,"offset":6112},"end":{"line":76,"column":554,"offset":6665}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To do so, let’s try to formalize the earlier ","position":{"start":{"line":78,"column":1,"offset":6667},"end":{"line":78,"column":46,"offset":6712}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Cost Semantics,","position":{"start":{"line":78,"column":47,"offset":6713},"end":{"line":78,"column":62,"offset":6728}}}],"position":{"start":{"line":78,"column":46,"offset":6712},"end":{"line":78,"column":63,"offset":6729}}},{"type":"text","value":" first by formalizing what ","position":{"start":{"line":78,"column":63,"offset":6729},"end":{"line":78,"column":90,"offset":6756}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"cost","position":{"start":{"line":78,"column":92,"offset":6758},"end":{"line":78,"column":96,"offset":6762}}}],"position":{"start":{"line":78,"column":90,"offset":6756},"end":{"line":78,"column":98,"offset":6764}}},{"type":"text","value":" is, and then creating a judgement that tells us how to get the ","position":{"start":{"line":78,"column":98,"offset":6764},"end":{"line":78,"column":162,"offset":6828}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"cost","position":{"start":{"line":78,"column":163,"offset":6829},"end":{"line":78,"column":167,"offset":6833}}}],"position":{"start":{"line":78,"column":162,"offset":6828},"end":{"line":78,"column":168,"offset":6834}}},{"type":"text","value":" of expressions:","position":{"start":{"line":78,"column":168,"offset":6834},"end":{"line":78,"column":184,"offset":6850}}}],"position":{"start":{"line":78,"column":1,"offset":6667},"end":{"line":78,"column":184,"offset":6850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cost Semantics, formalized","position":{"start":{"line":80,"column":5,"offset":6856},"end":{"line":80,"column":31,"offset":6882}}}],"position":{"start":{"line":80,"column":1,"offset":6852},"end":{"line":80,"column":31,"offset":6882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Firstly, we need to formalize what cost is, which we’ll do recursively as a following:","position":{"start":{"line":82,"column":1,"offset":6884},"end":{"line":82,"column":87,"offset":6970}}}],"position":{"start":{"line":82,"column":1,"offset":6884},"end":{"line":82,"column":87,"offset":6970}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token module variable\">Cost</span> c <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> which will refer <span class=\"token keyword\">to</span> <span class=\"token number\">0</span> cost operations <span class=\"token punctuation\">(</span>such <span class=\"token keyword\">as</span> simply having <span class=\"token string\">`5`</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> which will refer <span class=\"token keyword\">to</span> unit cost operations<span class=\"token punctuation\">,</span> like adding\n         <span class=\"token operator\">|</span> c1 x c2 <span class=\"token punctuation\">,</span> <span class=\"token keyword\">where</span> we'll compose two parallel operations <span class=\"token keyword\">with</span> costs c1 <span class=\"token operator\">and</span> c2\n         <span class=\"token operator\">|</span> c1 <span class=\"token operator\">+</span> c2 <span class=\"token punctuation\">,</span> <span class=\"token keyword\">where</span> we'll run both statements sequentially<span class=\"token punctuation\">,</span> <span class=\"token keyword\">with</span> costs c1 <span class=\"token operator\">and</span> c2</code></pre></div>","position":{"start":{"line":84,"column":1,"offset":6972},"end":{"line":89,"column":4,"offset":7306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, it’s important to note “x” and ”+” do NOT refer to the multiplication and addition operators we’re familiar with. Instead, they’re arbitrary combining operations. We’ll get into more about this later, after we define how cost propogates across expressions","position":{"start":{"line":91,"column":1,"offset":7308},"end":{"line":91,"column":262,"offset":7569}}}],"position":{"start":{"line":91,"column":1,"offset":7308},"end":{"line":91,"column":262,"offset":7569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, we’ll formalize the cost semantics by adding a cost judgement, like the following:","position":{"start":{"line":93,"column":1,"offset":7571},"end":{"line":93,"column":88,"offset":7658}}}],"position":{"start":{"line":93,"column":1,"offset":7571},"end":{"line":93,"column":88,"offset":7658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><mn>1</mn></msub><msup><mo>⇓</mo><mi>c</mi></msup><msub><mi>e</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">e_1 \\Downarrow ^c e_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9088319999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>","position":{"start":{"line":95,"column":1,"offset":7660},"end":{"line":95,"column":26,"offset":7685}}}],"position":{"start":{"line":95,"column":1,"offset":7660},"end":{"line":95,"column":26,"offset":7685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we had to read this aloud, we’d say that “e1 evaluates to e2 with cost c”. This judgement will serve as our formalism computing the time cost of operations and, while we won’t go into full details about all of the rules in the system, we’ll cover just enough to help aid understanding about how this lets us reason about complexity.","position":{"start":{"line":97,"column":1,"offset":7687},"end":{"line":97,"column":336,"offset":8022}}}],"position":{"start":{"line":97,"column":1,"offset":7687},"end":{"line":97,"column":336,"offset":8022}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Firstly, and perhaps unsurprisingly, simply having a value is a 0-cost operation:","position":{"start":{"line":99,"column":1,"offset":8024},"end":{"line":99,"column":82,"offset":8105}}}],"position":{"start":{"line":99,"column":1,"offset":8024},"end":{"line":99,"column":82,"offset":8105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow></mrow><mrow><munder accentunder=\"true\"><mi>n</mi><mo stretchy=\"true\">‾</mo></munder><msup><mo>⇓</mo><mn>0</mn></msup><munder accentunder=\"true\"><mi>n</mi><mo stretchy=\"true\">‾</mo></munder></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{}{\\underline{n}\\Downarrow^0 \\underline{n}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5630000000000002em;vertical-align:-0.886em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.677em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43056000000000005em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19999999999999996em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43056000000000005em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19999999999999996em;\"><span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.886em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":101,"column":1,"offset":8107},"end":{"line":101,"column":53,"offset":8159}}}],"position":{"start":{"line":101,"column":1,"offset":8107},"end":{"line":101,"column":53,"offset":8159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which makes sense, as, if you have a simple numeric literal, you can add that to the executable to have it, which is a simple and easy thing to do. ","position":{"start":{"line":103,"column":1,"offset":8161},"end":{"line":103,"column":149,"offset":8309}}}],"position":{"start":{"line":103,"column":1,"offset":8161},"end":{"line":103,"column":149,"offset":8309}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Secondly, when we have a compound operation, such as adding, we have the following rule:","position":{"start":{"line":105,"column":1,"offset":8311},"end":{"line":105,"column":89,"offset":8399}}}],"position":{"start":{"line":105,"column":1,"offset":8311},"end":{"line":105,"column":89,"offset":8399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>e</mi><mn>1</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>1</mn></msub></msup><munder accentunder=\"true\"><msub><mi>n</mi><mn>1</mn></msub><mo stretchy=\"true\">‾</mo></munder><mtext>   </mtext><msub><mi>e</mi><mn>2</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>2</mn></msub></msup><munder accentunder=\"true\"><msub><mi>n</mi><mn>2</mn></msub><mo stretchy=\"true\">‾</mo></munder></mrow><mrow><msub><mi>e</mi><mn>1</mn></msub><mo>+</mo><msub><mi>e</mi><mn>2</mn></msub><msup><mo>⇓</mo><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow></msup><munder accentunder=\"true\"><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub></mrow><mo stretchy=\"true\">‾</mo></munder></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e_1 \\Downarrow^{c_1} \\underline{n_1} \\text{\\ \\ \\ } e_2 \\Downarrow^{c_2} \\underline{n_2} }{e_1 + e_2 \\Downarrow^{c_1 + c_2 +1 } \\underline{n_1 + n_2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.47044em;vertical-align:-1.036em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.43444em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5833299999999999em;\"><span style=\"top:-2.69em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-2.9999999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3500000000000001em;\"><span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.74em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43056em;\"><span style=\"top:-2.69em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3499999999999999em;\"><span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\">   </span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43056em;\"><span style=\"top:-2.69em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3499999999999999em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.036em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":107,"column":1,"offset":8401},"end":{"line":107,"column":160,"offset":8560}}}],"position":{"start":{"line":107,"column":1,"offset":8401},"end":{"line":107,"column":160,"offset":8560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"where we combine/“add” the costs of evaluating the subexpressions to get the cost of the total, which makes sense as we’re essentially looking to combine all sequential operation costs in a uniform manner. ","position":{"start":{"line":109,"column":1,"offset":8562},"end":{"line":109,"column":207,"offset":8768}}}],"position":{"start":{"line":109,"column":1,"offset":8562},"end":{"line":109,"column":207,"offset":8768}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lastly, when we have a fork-join operation, we have the following rule:","position":{"start":{"line":111,"column":1,"offset":8770},"end":{"line":111,"column":72,"offset":8841}}}],"position":{"start":{"line":111,"column":1,"offset":8770},"end":{"line":111,"column":72,"offset":8841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>e</mi><mn>1</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>1</mn></msub></msup><msub><mi>v</mi><mn>1</mn></msub><mtext>   </mtext><msub><mi>e</mi><mn>2</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>2</mn></msub></msup><msub><mi>v</mi><mn>2</mn></msub><mtext>   </mtext><mo stretchy=\"false\">[</mo><mfrac><msub><mi>v</mi><mn>1</mn></msub><mi>x</mi></mfrac><mo separator=\"true\">,</mo><mfrac><msub><mi>v</mi><mn>2</mn></msub><mi>y</mi></mfrac><mo stretchy=\"false\">]</mo><msub><mi>e</mi><mn>3</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>3</mn></msub></msup><msub><mi>v</mi><mn>3</mn></msub></mrow><mrow><mtext>fork x</mtext><mo>=</mo><msub><mi>e</mi><mn>3</mn></msub><mtext> and </mtext><mi>y</mi><mo>=</mo><msub><mi>e</mi><mn>2</mn></msub><mtext> in </mtext><msub><mi>e</mi><mn>3</mn></msub><msup><mo>⇓</mo><mrow><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>c</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo>+</mo><msub><mi>c</mi><mn>3</mn></msub></mrow></msup><msub><mi>v</mi><mn>3</mn></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e_1 \\Downarrow^{c_1} v_1 \\text{\\ \\ \\ } e_2 \\Downarrow^{c_2}v_2 \\text{\\ \\ \\ } [\\frac{v_1}{x}, \\frac{v_2}{y}]e_3 \\Downarrow^{c_3}v_3}{\\text{fork x}=e_3 \\text{ and } y=e_2 \\text{ in } e_3 \\Downarrow^{(c_1 * c_2)+1+c_3}v_3}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.519548em;vertical-align:-0.8984399999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.621108em;\"><span style=\"top:-2.2960000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">fork x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> and </span></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> in </span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.814em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.871108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\">   </span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\">   </span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7114919999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4101em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7114919999999999em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4101em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">]</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8984399999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":113,"column":1,"offset":8843},"end":{"line":113,"column":230,"offset":9072}}}],"position":{"start":{"line":113,"column":1,"offset":8843},"end":{"line":113,"column":230,"offset":9072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which, again, makes sense, as we compose e1 and e2 in parallel, then compute e3 sequentially, plus a unit cost from the combination / scheduling the fork-join, as that takes work. ","position":{"start":{"line":115,"column":1,"offset":9074},"end":{"line":115,"column":181,"offset":9254}}}],"position":{"start":{"line":115,"column":1,"offset":9074},"end":{"line":115,"column":181,"offset":9254}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Work and Depth from Cost","position":{"start":{"line":117,"column":5,"offset":9260},"end":{"line":117,"column":29,"offset":9284}}}],"position":{"start":{"line":117,"column":1,"offset":9256},"end":{"line":117,"column":29,"offset":9284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With these primitives, and similar rules for all of our other operations, we could then get a rigorous definition of ","position":{"start":{"line":119,"column":1,"offset":9286},"end":{"line":119,"column":118,"offset":9403}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"cost","position":{"start":{"line":119,"column":120,"offset":9405},"end":{"line":119,"column":124,"offset":9409}}}],"position":{"start":{"line":119,"column":118,"offset":9403},"end":{"line":119,"column":126,"offset":9411}}},{"type":"text","value":". But, what we’re really looking for is a definition of ","position":{"start":{"line":119,"column":126,"offset":9411},"end":{"line":119,"column":182,"offset":9467}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"work,","position":{"start":{"line":119,"column":184,"offset":9469},"end":{"line":119,"column":189,"offset":9474}}}],"position":{"start":{"line":119,"column":182,"offset":9467},"end":{"line":119,"column":191,"offset":9476}}},{"type":"text","value":" our sequential operation cost, and ","position":{"start":{"line":119,"column":191,"offset":9476},"end":{"line":119,"column":227,"offset":9512}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"depth","position":{"start":{"line":119,"column":229,"offset":9514},"end":{"line":119,"column":234,"offset":9519}}}],"position":{"start":{"line":119,"column":227,"offset":9512},"end":{"line":119,"column":236,"offset":9521}}},{"type":"text","value":", our parallel operation cost. To get these, we can simply define them by work in the following manner:","position":{"start":{"line":119,"column":236,"offset":9521},"end":{"line":119,"column":339,"offset":9624}}}],"position":{"start":{"line":119,"column":1,"offset":9286},"end":{"line":119,"column":339,"offset":9624}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s define a function, work(c), which takes in a cost expression and computes the numerical work for a computation. As we’re trying to grab the cost of all operations, we can define work recursively like this:","position":{"start":{"line":121,"column":1,"offset":9626},"end":{"line":121,"column":212,"offset":9837}}}],"position":{"start":{"line":121,"column":1,"offset":9626},"end":{"line":121,"column":212,"offset":9837}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">work<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nwork<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nwork<span class=\"token punctuation\">(</span>c1 x c2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> work<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> work<span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\nwork<span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> work<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> work<span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":123,"column":1,"offset":9839},"end":{"line":128,"column":4,"offset":9947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And, this makes a lot of sense. Here, we turned both parallel composition and sequential composition into simply adding costs, as we simply want to know how many operations we perform.","position":{"start":{"line":130,"column":1,"offset":9949},"end":{"line":130,"column":185,"offset":10133}}}],"position":{"start":{"line":130,"column":1,"offset":9949},"end":{"line":130,"column":185,"offset":10133}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, if we want to define depth, we’d do it in the following way:","position":{"start":{"line":132,"column":1,"offset":10135},"end":{"line":132,"column":66,"offset":10200}}}],"position":{"start":{"line":132,"column":1,"offset":10135},"end":{"line":132,"column":66,"offset":10200}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">depth<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ndepth<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\ndepth<span class=\"token punctuation\">(</span>c1 x c2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>depth<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndepth<span class=\"token punctuation\">(</span>c1 <span class=\"token operator\">+</span> c2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> depth<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> depth<span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":134,"column":1,"offset":10202},"end":{"line":139,"column":4,"offset":10322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, once again, we get something that makes a lot of sense. If we had a purely sequential computation, the overall work would be the same thing as the depth, so we get no benefit from running operations in parallel versus running them sequentially. However, if we had a parallel computation, we’d be able to save some time, as we’d only have to wait on the longer computation instead of the sum of both computations, demonstrating a parallel ","position":{"start":{"line":141,"column":1,"offset":10324},"end":{"line":141,"column":445,"offset":10768}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"speedup","position":{"start":{"line":141,"column":447,"offset":10770},"end":{"line":141,"column":454,"offset":10777}}}],"position":{"start":{"line":141,"column":445,"offset":10768},"end":{"line":141,"column":456,"offset":10779}}},{"type":"text","value":".","position":{"start":{"line":141,"column":456,"offset":10779},"end":{"line":141,"column":457,"offset":10780}}}],"position":{"start":{"line":141,"column":1,"offset":10324},"end":{"line":141,"column":457,"offset":10780}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With all of this said and done, while we didn’t define ALFA with forks completely, we get the point. Let’s see an example of how this construct, fork-join parallelism, can be used to speed up computation dramatically:","position":{"start":{"line":143,"column":1,"offset":10782},"end":{"line":143,"column":218,"offset":10999}}}],"position":{"start":{"line":143,"column":1,"offset":10782},"end":{"line":143,"column":218,"offset":10999}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":145,"column":1,"offset":11001},"end":{"line":145,"column":4,"offset":11004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Fork Join Parallelism in Context","position":{"start":{"line":147,"column":5,"offset":11010},"end":{"line":147,"column":37,"offset":11042}}}],"position":{"start":{"line":147,"column":1,"offset":11006},"end":{"line":147,"column":37,"offset":11042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Or how to use a bunch of guinea pigs ","position":{"start":{"line":149,"column":1,"offset":11044},"end":{"line":149,"column":38,"offset":11081}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"cough","position":{"start":{"line":149,"column":39,"offset":11082},"end":{"line":149,"column":44,"offset":11087}}}],"position":{"start":{"line":149,"column":38,"offset":11081},"end":{"line":149,"column":45,"offset":11088}}},{"type":"text","value":" CS students ","position":{"start":{"line":149,"column":45,"offset":11088},"end":{"line":149,"column":58,"offset":11101}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"cough","position":{"start":{"line":149,"column":59,"offset":11102},"end":{"line":149,"column":64,"offset":11107}}}],"position":{"start":{"line":149,"column":58,"offset":11101},"end":{"line":149,"column":65,"offset":11108}}},{"type":"text","value":" to get more computation done in marginally faster ways","position":{"start":{"line":149,"column":65,"offset":11108},"end":{"line":149,"column":120,"offset":11163}}}],"position":{"start":{"line":149,"column":1,"offset":11044},"end":{"line":149,"column":120,"offset":11163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s say we had a tree type, defined in the following way:","position":{"start":{"line":151,"column":1,"offset":11165},"end":{"line":151,"column":60,"offset":11224}}}],"position":{"start":{"line":151,"column":1,"offset":11165},"end":{"line":151,"column":60,"offset":11224}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">type</span> tree <span class=\"token operator\">=</span> <span class=\"token module variable\">Empty</span>\n          <span class=\"token operator\">|</span> <span class=\"token module variable\">Node</span> <span class=\"token keyword\">of</span> tree <span class=\"token operator\">*</span> int <span class=\"token operator\">*</span> tree</code></pre></div>","position":{"start":{"line":153,"column":1,"offset":11226},"end":{"line":156,"column":4,"offset":11294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"and, say for an interview, we were tasked with finding the minimum of this tree, which we knew was perfectly balanced through some other constraints.","position":{"start":{"line":158,"column":1,"offset":11296},"end":{"line":158,"column":150,"offset":11445}}}],"position":{"start":{"line":158,"column":1,"offset":11296},"end":{"line":158,"column":150,"offset":11445}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the language we were working in had recursion, then we could simply do that in the following manner:","position":{"start":{"line":160,"column":1,"offset":11447},"end":{"line":160,"column":104,"offset":11550}}}],"position":{"start":{"line":160,"column":1,"offset":11447},"end":{"line":160,"column":104,"offset":11550}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">rec</span> findmin<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">:</span> tree <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n   <span class=\"token keyword\">match</span> x <span class=\"token keyword\">with</span> \n   <span class=\"token operator\">|</span> <span class=\"token module variable\">Empty</span> <span class=\"token operator\">-></span> <span class=\"token number\">0</span>\n   <span class=\"token operator\">|</span> <span class=\"token module variable\">Node</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n       <span class=\"token keyword\">let</span> minleft <span class=\"token operator\">=</span> findmin<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n       <span class=\"token keyword\">let</span> minright <span class=\"token operator\">=</span> findmin<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n       min<span class=\"token punctuation\">(</span>minleft<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> minright<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </code></pre></div>","position":{"start":{"line":162,"column":1,"offset":11552},"end":{"line":170,"column":4,"offset":11775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"where we simply check the mins of each subtree, and then compare them with the value at the current node. ","position":{"start":{"line":172,"column":1,"offset":11777},"end":{"line":172,"column":107,"offset":11883}}}],"position":{"start":{"line":172,"column":1,"offset":11777},"end":{"line":172,"column":107,"offset":11883}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This sequential computation is what’s known as something that is ","position":{"start":{"line":174,"column":1,"offset":11885},"end":{"line":174,"column":66,"offset":11950}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"obviously parallelizable","position":{"start":{"line":174,"column":67,"offset":11951},"end":{"line":174,"column":91,"offset":11975}}}],"position":{"start":{"line":174,"column":66,"offset":11950},"end":{"line":174,"column":92,"offset":11976}}},{"type":"text","value":", where we have two computations that could simply be ran in parallel without any major modification to the code. If we simply turn it to the following:","position":{"start":{"line":174,"column":92,"offset":11976},"end":{"line":174,"column":244,"offset":12128}}}],"position":{"start":{"line":174,"column":1,"offset":11885},"end":{"line":174,"column":244,"offset":12128}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">rec</span> findmin<span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">:</span> tree <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n       <span class=\"token keyword\">match</span> x <span class=\"token keyword\">with</span> \n       <span class=\"token operator\">|</span> <span class=\"token module variable\">Empty</span> <span class=\"token operator\">-></span> <span class=\"token number\">0</span>\n       <span class=\"token operator\">|</span> <span class=\"token module variable\">Node</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n           fork minleft <span class=\"token operator\">=</span> findmin<span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span>\n            minright <span class=\"token operator\">=</span> findmin<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n           min<span class=\"token punctuation\">(</span>minleft<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> minright<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":176,"column":1,"offset":12130},"end":{"line":184,"column":4,"offset":12374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We know, intuitively, that this computation will be faster than the sequential operation, but it remains to be seen just how much ","position":{"start":{"line":186,"column":1,"offset":12376},"end":{"line":186,"column":131,"offset":12506}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faster","position":{"start":{"line":186,"column":132,"offset":12507},"end":{"line":186,"column":138,"offset":12513}}}],"position":{"start":{"line":186,"column":131,"offset":12506},"end":{"line":186,"column":139,"offset":12514}}},{"type":"text","value":" it is. To do so, let’s compute both the ","position":{"start":{"line":186,"column":139,"offset":12514},"end":{"line":186,"column":180,"offset":12555}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"work","position":{"start":{"line":186,"column":182,"offset":12557},"end":{"line":186,"column":186,"offset":12561}}}],"position":{"start":{"line":186,"column":180,"offset":12555},"end":{"line":186,"column":188,"offset":12563}}},{"type":"text","value":" and ","position":{"start":{"line":186,"column":188,"offset":12563},"end":{"line":186,"column":193,"offset":12568}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"depth","position":{"start":{"line":186,"column":195,"offset":12570},"end":{"line":186,"column":200,"offset":12575}}}],"position":{"start":{"line":186,"column":193,"offset":12568},"end":{"line":186,"column":202,"offset":12577}}},{"type":"text","value":" of this computation:","position":{"start":{"line":186,"column":202,"offset":12577},"end":{"line":186,"column":223,"offset":12598}}}],"position":{"start":{"line":186,"column":1,"offset":12376},"end":{"line":186,"column":223,"offset":12598}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For the ","position":{"start":{"line":188,"column":1,"offset":12600},"end":{"line":188,"column":9,"offset":12608}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Work,","position":{"start":{"line":188,"column":11,"offset":12610},"end":{"line":188,"column":16,"offset":12615}}}],"position":{"start":{"line":188,"column":9,"offset":12608},"end":{"line":188,"column":18,"offset":12617}}},{"type":"text","value":" where findmin(x) is done on a tree with n nodes:","position":{"start":{"line":188,"column":18,"offset":12617},"end":{"line":188,"column":67,"offset":12666}}}],"position":{"start":{"line":188,"column":1,"offset":12600},"end":{"line":188,"column":67,"offset":12666}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Firstly, we know that w(0) = 1, as we need to check if the node is empty to do anything","position":{"start":{"line":190,"column":3,"offset":12670},"end":{"line":190,"column":90,"offset":12757}}}],"position":{"start":{"line":190,"column":1,"offset":12668},"end":{"line":190,"column":90,"offset":12757}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Secondly, we know that w(n) = the time to match + the time to join + the time of figuring out the min of both branches, each of which has n/2 nodes = 1 + 1 + w(n/2) + w(n/2). Thus, our final equation is simply w(n) = 2 + 2*w(n/2)","position":{"start":{"line":191,"column":3,"offset":12760},"end":{"line":191,"column":232,"offset":12989}}}],"position":{"start":{"line":191,"column":1,"offset":12758},"end":{"line":191,"column":232,"offset":12989}}},{"type":"text","value":"\n"}],"position":{"start":{"line":190,"column":1,"offset":12668},"end":{"line":191,"column":232,"offset":12989}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As we can see, we have a recurrence relation. Thus, going back to 281, we can use the Master Theorem to get that:","position":{"start":{"line":193,"column":1,"offset":12991},"end":{"line":193,"column":114,"offset":13104}}}],"position":{"start":{"line":193,"column":1,"offset":12991},"end":{"line":193,"column":114,"offset":13104}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">w(n) \\in O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span>","position":{"start":{"line":195,"column":1,"offset":13106},"end":{"line":195,"column":18,"offset":13123}}}],"position":{"start":{"line":195,"column":1,"offset":13106},"end":{"line":195,"column":18,"offset":13123}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"which makes sense, as we have to look through each node, and we need to do a finite number of comparisons for each node to check if its the current minimum or not. ","position":{"start":{"line":197,"column":1,"offset":13125},"end":{"line":197,"column":165,"offset":13289}}}],"position":{"start":{"line":197,"column":1,"offset":13125},"end":{"line":197,"column":165,"offset":13289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, for the ","position":{"start":{"line":199,"column":1,"offset":13291},"end":{"line":199,"column":14,"offset":13304}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Depth,","position":{"start":{"line":199,"column":16,"offset":13306},"end":{"line":199,"column":22,"offset":13312}}}],"position":{"start":{"line":199,"column":14,"offset":13304},"end":{"line":199,"column":24,"offset":13314}}},{"type":"text","value":" we can do the following:","position":{"start":{"line":199,"column":24,"offset":13314},"end":{"line":199,"column":49,"offset":13339}}}],"position":{"start":{"line":199,"column":1,"offset":13291},"end":{"line":199,"column":49,"offset":13339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Once again, d(0) = 1, as we still need the case expression","position":{"start":{"line":201,"column":3,"offset":13343},"end":{"line":201,"column":61,"offset":13401}}}],"position":{"start":{"line":201,"column":1,"offset":13341},"end":{"line":201,"column":61,"offset":13401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"d(n) = 1 + max(depth(n/2), depth(n/2)) + 1, as we’re running the recursive step in parallel, so we have two workers check to see if either subtree is smaller instead of doing it ourselves. Thus, d(n) = 2 + depth(n/2), as we have a balanced tree","position":{"start":{"line":202,"column":3,"offset":13404},"end":{"line":202,"column":247,"offset":13648}}}],"position":{"start":{"line":202,"column":1,"offset":13402},"end":{"line":202,"column":247,"offset":13648}}},{"type":"text","value":"\n"}],"position":{"start":{"line":201,"column":1,"offset":13341},"end":{"line":202,"column":247,"offset":13648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, once again, we can use the Master Theorem to get that:","position":{"start":{"line":204,"column":1,"offset":13650},"end":{"line":204,"column":61,"offset":13710}}}],"position":{"start":{"line":204,"column":1,"offset":13650},"end":{"line":204,"column":61,"offset":13710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(n) \\in O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span></span>","position":{"start":{"line":206,"column":1,"offset":13712},"end":{"line":206,"column":23,"offset":13734}}}],"position":{"start":{"line":206,"column":1,"offset":13712},"end":{"line":206,"column":23,"offset":13734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And wow! We did it! We managed to turn a O(n) algorithm into something that takes O(log(n)) time if we had infinitely many processors ( more on this later ). To figure out how well we did, we can compute the ","position":{"start":{"line":208,"column":1,"offset":13736},"end":{"line":208,"column":209,"offset":13944}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"parallelizability ratio","position":{"start":{"line":208,"column":211,"offset":13946},"end":{"line":208,"column":234,"offset":13969}}}],"position":{"start":{"line":208,"column":209,"offset":13944},"end":{"line":208,"column":236,"offset":13971}}},{"type":"text","value":" for this computation:","position":{"start":{"line":208,"column":236,"offset":13971},"end":{"line":208,"column":258,"offset":13993}}}],"position":{"start":{"line":208,"column":1,"offset":13736},"end":{"line":208,"column":258,"offset":13993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":210,"column":1,"offset":13995},"end":{"line":210,"column":5,"offset":13999}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"parallelizability ratio","position":{"start":{"line":210,"column":6,"offset":14000},"end":{"line":210,"column":29,"offset":14023}}}],"position":{"start":{"line":210,"column":5,"offset":13999},"end":{"line":210,"column":30,"offset":14024}}},{"type":"text","value":" for a computation is simply the work on an input of n size over the depth on an input of n size, or w(n)/d(n)","position":{"start":{"line":210,"column":30,"offset":14024},"end":{"line":210,"column":140,"offset":14134}}}],"position":{"start":{"line":210,"column":1,"offset":13995},"end":{"line":210,"column":140,"offset":14134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In our case, then, the ratio is:","position":{"start":{"line":212,"column":1,"offset":14136},"end":{"line":212,"column":33,"offset":14168}}}],"position":{"start":{"line":212,"column":1,"offset":14136},"end":{"line":212,"column":33,"offset":14168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mrow><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{\\log(n)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.0435600000000003em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":214,"column":1,"offset":14170},"end":{"line":214,"column":22,"offset":14191}}}],"position":{"start":{"line":214,"column":1,"offset":14170},"end":{"line":214,"column":22,"offset":14191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"which, as it’s much, much, greater than one, implies that this computation is parallizable, and that we did a great job parallelizing it! Woot!","position":{"start":{"line":216,"column":1,"offset":14193},"end":{"line":216,"column":144,"offset":14336}}}],"position":{"start":{"line":216,"column":1,"offset":14193},"end":{"line":216,"column":144,"offset":14336}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":218,"column":1,"offset":14338},"end":{"line":218,"column":4,"offset":14341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Bounded Parallelism","position":{"start":{"line":220,"column":5,"offset":14347},"end":{"line":220,"column":24,"offset":14366}}}],"position":{"start":{"line":220,"column":1,"offset":14343},"end":{"line":220,"column":24,"offset":14366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, while we wish we could have our cake and eat it too, we know that, sadly, can’t be the case. In real life, we don’t have infinitely many processors, we have p processors.","position":{"start":{"line":222,"column":1,"offset":14368},"end":{"line":222,"column":180,"offset":14547}}}],"position":{"start":{"line":222,"column":1,"offset":14368},"end":{"line":222,"column":180,"offset":14547}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Furthermore, we generally don’t even have perfect communication between many processors as the number of processors grows without bound. Thus, it’s not just limited processors, but processors that are arranged in graphs who can’t communicate to each other all directly, but we’ll gloss over this extra caveat for this class.","position":{"start":{"line":224,"column":1,"offset":14549},"end":{"line":224,"column":325,"offset":14873}}}],"position":{"start":{"line":224,"column":1,"offset":14549},"end":{"line":224,"column":325,"offset":14873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here we’ll state, without proof, a theorem that demonstrates the potential speedup we can still achieve, known as ","position":{"start":{"line":226,"column":1,"offset":14875},"end":{"line":226,"column":115,"offset":14989}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Brent’s Theorem:","position":{"start":{"line":226,"column":117,"offset":14991},"end":{"line":226,"column":133,"offset":15007}}}],"position":{"start":{"line":226,"column":115,"offset":14989},"end":{"line":226,"column":135,"offset":15009}}}],"position":{"start":{"line":226,"column":1,"offset":14875},"end":{"line":226,"column":135,"offset":15009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":228,"column":1,"offset":15011},"end":{"line":228,"column":4,"offset":15014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Brent’s Theorem:","position":{"start":{"line":230,"column":3,"offset":15018},"end":{"line":230,"column":19,"offset":15034}}}],"position":{"start":{"line":230,"column":1,"offset":15016},"end":{"line":230,"column":21,"offset":15036}}},{"type":"text","value":" If e evaluates to v with cost c, and the work of c is w, while the depth of c is d, then we need:","position":{"start":{"line":230,"column":21,"offset":15036},"end":{"line":230,"column":119,"offset":15134}}}],"position":{"start":{"line":230,"column":1,"offset":15016},"end":{"line":230,"column":119,"offset":15134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>w</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\max(w/p, d))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span>","position":{"start":{"line":232,"column":1,"offset":15136},"end":{"line":232,"column":20,"offset":15155}}}],"position":{"start":{"line":232,"column":1,"offset":15136},"end":{"line":232,"column":20,"offset":15155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"time to execute our program, where p is the number of processors. ","position":{"start":{"line":234,"column":1,"offset":15157},"end":{"line":234,"column":67,"offset":15223}}}],"position":{"start":{"line":234,"column":1,"offset":15157},"end":{"line":234,"column":67,"offset":15223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":236,"column":1,"offset":15225},"end":{"line":236,"column":4,"offset":15228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thus, for our program, while it’s still very parallelizable, we’re really going to get the following time complexity if we ran it on our processor-bound computers:","position":{"start":{"line":238,"column":1,"offset":15230},"end":{"line":238,"column":164,"offset":15393}}}],"position":{"start":{"line":238,"column":1,"offset":15230},"end":{"line":238,"column":164,"offset":15393}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mo separator=\"true\">,</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(max(n/p, log(n)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span>","position":{"start":{"line":240,"column":1,"offset":15395},"end":{"line":240,"column":24,"offset":15418}}}],"position":{"start":{"line":240,"column":1,"offset":15395},"end":{"line":240,"column":24,"offset":15418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"which, as p tends to be very small for most desktops, leads to our program taking the following time:","position":{"start":{"line":242,"column":1,"offset":15420},"end":{"line":242,"column":102,"offset":15521}}}],"position":{"start":{"line":242,"column":1,"offset":15420},"end":{"line":242,"column":102,"offset":15521}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n/p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">p</span><span class=\"mclose\">)</span></span></span></span></span>","position":{"start":{"line":244,"column":1,"offset":15523},"end":{"line":244,"column":11,"offset":15533}}}],"position":{"start":{"line":244,"column":1,"offset":15523},"end":{"line":244,"column":11,"offset":15533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, if p is large enough for our program, we’d be able to get the full O(log(n)) time cost, make our program reallllllly speedy.","position":{"start":{"line":246,"column":1,"offset":15535},"end":{"line":246,"column":134,"offset":15668}}}],"position":{"start":{"line":246,"column":1,"offset":15535},"end":{"line":246,"column":134,"offset":15668}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively, if we had some form of sequential operation, where work and depth are equal, we see that Brent’s theorem leads to a time complexity of O(d), or O(w), which makes sense as, in a sequential operation, ","position":{"start":{"line":248,"column":1,"offset":15670},"end":{"line":248,"column":215,"offset":15884}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"d dominates","position":{"start":{"line":248,"column":216,"offset":15885},"end":{"line":248,"column":227,"offset":15896}}}],"position":{"start":{"line":248,"column":215,"offset":15884},"end":{"line":248,"column":228,"offset":15897}}},{"type":"text","value":", i.e. it’s too large to make any parallel calls to speed it up (without perhaps changing the algorithm…)","position":{"start":{"line":248,"column":228,"offset":15897},"end":{"line":248,"column":335,"offset":16004}}}],"position":{"start":{"line":248,"column":1,"offset":15670},"end":{"line":248,"column":335,"offset":16004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":250,"column":1,"offset":16006},"end":{"line":250,"column":4,"offset":16009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Data Parallelism: Fork-Join Parallelism w/ Vectors","position":{"start":{"line":252,"column":5,"offset":16015},"end":{"line":252,"column":55,"offset":16065}}}],"position":{"start":{"line":252,"column":1,"offset":16011},"end":{"line":252,"column":55,"offset":16065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"→ Or, how to tame a GPU","position":{"start":{"line":254,"column":1,"offset":16067},"end":{"line":254,"column":24,"offset":16090}}}],"position":{"start":{"line":254,"column":1,"offset":16067},"end":{"line":254,"column":24,"offset":16090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, as you can guess, Fork-Join parallelism isn’t the only way we can do this parallel nonsense.","position":{"start":{"line":256,"column":1,"offset":16092},"end":{"line":256,"column":98,"offset":16189}}}],"position":{"start":{"line":256,"column":1,"offset":16092},"end":{"line":256,"column":98,"offset":16189}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It turns out, in most micro-architectures and in Graphics Processing Units of nowadays, we have a new form of parallelism called data parallelism. This form of parallelism excels in taking large amounts of data and applying large operations all at once, allowing us to do some crazy matrix and vector operations almost atomically, leading to crazy speedups for scientific and gaming computations, which make use of a lot of this.","position":{"start":{"line":258,"column":1,"offset":16191},"end":{"line":258,"column":430,"offset":16620}}}],"position":{"start":{"line":258,"column":1,"offset":16191},"end":{"line":258,"column":430,"offset":16620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For Data Parallelism, we introduce a new type called a ","position":{"start":{"line":260,"column":1,"offset":16622},"end":{"line":260,"column":56,"offset":16677}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"vector:","position":{"start":{"line":260,"column":57,"offset":16678},"end":{"line":260,"column":64,"offset":16685}}}],"position":{"start":{"line":260,"column":56,"offset":16677},"end":{"line":260,"column":65,"offset":16686}}}],"position":{"start":{"line":260,"column":1,"offset":16622},"end":{"line":260,"column":65,"offset":16686}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">tau <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> vec<span class=\"token punctuation\">(</span>tau<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":262,"column":1,"offset":16688},"end":{"line":264,"column":4,"offset":16717}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This will stand for the large lists of numbers such processors work with. Additionally, we’ll also introduce the following expressions:","position":{"start":{"line":266,"column":1,"offset":16719},"end":{"line":266,"column":136,"offset":16854}}}],"position":{"start":{"line":266,"column":1,"offset":16719},"end":{"line":266,"column":136,"offset":16854}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">e <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> vec<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> en<span class=\"token punctuation\">)</span>     <span class=\"token module variable\">The</span> introduction form <span class=\"token keyword\">for</span> vectors\n     <span class=\"token operator\">|</span> len<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>               <span class=\"token module variable\">An</span> operation <span class=\"token keyword\">to</span> compute the length <span class=\"token keyword\">of</span> a vector\n     <span class=\"token operator\">|</span> sub<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">)</span>           <span class=\"token module variable\">An</span> operation which lets us grab some element from the vector\n     <span class=\"token operator\">|</span> map<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">)</span>           A <span class=\"token module variable\">Parallel</span> <span class=\"token module variable\">Map</span> <span class=\"token module variable\">Operation</span>\n     <span class=\"token operator\">|</span> tab<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">)</span>           A <span class=\"token module variable\">Parallel</span> <span class=\"token module variable\">Tabulation</span> <span class=\"token module variable\">Operation</span></code></pre></div>","position":{"start":{"line":268,"column":1,"offset":16856},"end":{"line":274,"column":4,"offset":17207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you’re familiar with the Google Map-Reduce framework, or Hadoop, simply change “tab” to “reduce”, as they’re equivalent.","position":{"start":{"line":276,"column":1,"offset":17209},"end":{"line":276,"column":124,"offset":17332}}}],"position":{"start":{"line":276,"column":1,"offset":17209},"end":{"line":276,"column":124,"offset":17332}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, let’s skip the static and dynamic semantics and go straight to the cost semantics. These are reallly similar to those of fork-join parallelism. For subscripting, it’s going to be the following:","position":{"start":{"line":278,"column":1,"offset":17334},"end":{"line":278,"column":199,"offset":17532}}}],"position":{"start":{"line":278,"column":1,"offset":17334},"end":{"line":278,"column":199,"offset":17532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>e</mi><mn>1</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>1</mn></msub></msup><mtext>vec(v1, ..., vn)   </mtext><msub><mi>e</mi><mn>2</mn></msub><msup><mo>⇓</mo><mrow><mi>c</mi><mn>2</mn></mrow></msup><munder accentunder=\"true\"><mi>i</mi><mo stretchy=\"true\">‾</mo></munder></mrow><mrow><mtext>sub(</mtext><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><msup><mo>⇓</mo><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow></msup><msub><mi>v</mi><mi>i</mi></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e_1 \\Downarrow^{c_1} \\text{vec(v1, ..., vn)\\ \\ \\ } e_2 \\Downarrow^{c2}\\underline{i}}{\\text{sub(}e_1,e_2) \\Downarrow^{c_1 + c_2 + 1} v_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.427108em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">sub(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">vec(v1, ..., vn)   </span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6595199999999999em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20000000000000007em;\"><span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":280,"column":1,"offset":17534},"end":{"line":280,"column":147,"offset":17680}}}],"position":{"start":{"line":280,"column":1,"offset":17534},"end":{"line":280,"column":147,"offset":17680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Like fork-join parallelism, this makes a lot of sense, as this is a unit-cost operation to find an element in a vector, at least conceptually (though you could always adapt this to be more-low level, at the cost of theoretical cleanliness), and as this is simply a sequential operation.","position":{"start":{"line":282,"column":1,"offset":17682},"end":{"line":282,"column":287,"offset":17968}}}],"position":{"start":{"line":282,"column":1,"offset":17682},"end":{"line":282,"column":287,"offset":17968}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For the parallel map operation, however, it’d be the following:","position":{"start":{"line":284,"column":1,"offset":17970},"end":{"line":284,"column":64,"offset":18033}}}],"position":{"start":{"line":284,"column":1,"offset":17970},"end":{"line":284,"column":64,"offset":18033}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>e</mi><mn>1</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mi>v</mi></msub></msup><mtext>vec(</mtext><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mtext>    </mtext><msub><mi>e</mi><mn>2</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mi>f</mi></msub></msup><mtext>fun(x</mtext><mo>→</mo><msubsup><mi>e</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><mtext>    </mtext><mi>f</mi><mtext> </mtext><msub><mi>v</mi><mn>1</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>1</mn></msub></msup><msubsup><mi>v</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">;</mo><mtext> </mtext><mi>f</mi><mtext> </mtext><msub><mi>v</mi><mn>2</mn></msub><msup><mo>⇓</mo><msub><mi>c</mi><mn>2</mn></msub></msup><msubsup><mi>v</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">;</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mtext> </mtext><mo separator=\"true\">;</mo><mi>f</mi><mtext> </mtext><msub><mi>v</mi><mi>n</mi></msub><msup><mo>⇓</mo><msub><mi>c</mi><mi>n</mi></msub></msup><msubsup><mi>v</mi><mi>n</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><mrow><mtext>map(</mtext><msub><mi>e</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mo stretchy=\"false\">)</mo><msup><mo>⇓</mo><mrow><msub><mi>c</mi><mi>v</mi></msub><mo>+</mo><msub><mi>c</mi><mi>f</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>∗</mo><msub><mi>c</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e_1 \\Downarrow^{c_v} \\text{vec(}v_1,...,v_n) \\text{\\ \\ \\ \\ } e_2 \\Downarrow^{c_f}\\text{fun(x}\\rightarrow e_2&#x27;) \\text{\\ \\ \\ \\ } f\\ v_1 \\Downarrow^{c_1}v_1&#x27;;\\ f\\ v_2 \\Downarrow^{c_2}v_2&#x27;;\\ ...\\ ;f\\ v_n \\Downarrow^{c_n}v_n&#x27; }{\\text{map(}e_1,e_2) \\Downarrow^{c_v + c_f + (c_1 * ... * c_n)}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.404722em;vertical-align:-0.9758299999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.2741700000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">map(</span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8358299999999999em;\"><span style=\"top:-3.01083em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29011428571428566em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">.</span><span class=\"mord mtight\">.</span><span class=\"mbin mtight\">∗</span><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">vec(</span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\">    </span></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29011428571428566em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">fun(x</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord text\"><span class=\"mord\">    </span></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mspace\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\"> </span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">⇓</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9758299999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":286,"column":1,"offset":18035},"end":{"line":286,"column":297,"offset":18331}}}],"position":{"start":{"line":286,"column":1,"offset":18035},"end":{"line":286,"column":297,"offset":18331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which makes sense, as map is essentially just a really, really, large fork-join, applying some function to each element atomically.","position":{"start":{"line":288,"column":1,"offset":18333},"end":{"line":288,"column":132,"offset":18464}}}],"position":{"start":{"line":288,"column":1,"offset":18333},"end":{"line":288,"column":132,"offset":18464}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, this is really, really simple, as it’s just an extension of the earlier idea, but this is used in Data-Science frameworks like Google’s Map-Reduce, and in creating programs like fragment shaders. It’s really useful due to its simplicity, and creating good programs using it is still a hard process.","position":{"start":{"line":290,"column":1,"offset":18466},"end":{"line":290,"column":304,"offset":18769}}}],"position":{"start":{"line":290,"column":1,"offset":18466},"end":{"line":290,"column":304,"offset":18769}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":292,"column":1,"offset":18771},"end":{"line":292,"column":4,"offset":18774}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Futures","position":{"start":{"line":294,"column":5,"offset":18780},"end":{"line":294,"column":12,"offset":18787}}}],"position":{"start":{"line":294,"column":1,"offset":18776},"end":{"line":294,"column":12,"offset":18787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"→ Or, yet another way to do parallelism","position":{"start":{"line":296,"column":1,"offset":18789},"end":{"line":296,"column":40,"offset":18828}}}],"position":{"start":{"line":296,"column":1,"offset":18789},"end":{"line":296,"column":40,"offset":18828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And, lastly, here’s a third commonly used way to introduce parallelism: futures!","position":{"start":{"line":298,"column":1,"offset":18830},"end":{"line":298,"column":81,"offset":18910}}}],"position":{"start":{"line":298,"column":1,"offset":18830},"end":{"line":298,"column":81,"offset":18910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The idea here is that, instead of having a function that we ","position":{"start":{"line":300,"column":3,"offset":18914},"end":{"line":300,"column":63,"offset":18974}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"call","position":{"start":{"line":300,"column":65,"offset":18976},"end":{"line":300,"column":69,"offset":18980}}}],"position":{"start":{"line":300,"column":63,"offset":18974},"end":{"line":300,"column":71,"offset":18982}}},{"type":"text","value":" in parallel, and then ","position":{"start":{"line":300,"column":71,"offset":18982},"end":{"line":300,"column":94,"offset":19005}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"combine","position":{"start":{"line":300,"column":96,"offset":19007},"end":{"line":300,"column":103,"offset":19014}}}],"position":{"start":{"line":300,"column":94,"offset":19005},"end":{"line":300,"column":105,"offset":19016}}},{"type":"text","value":" the function later on, we have a new keyword, ","position":{"start":{"line":300,"column":105,"offset":19016},"end":{"line":300,"column":152,"offset":19063}}},{"type":"raw","value":"<code class=\"language-text\">spawn</code>","position":{"start":{"line":300,"column":152,"offset":19063},"end":{"line":300,"column":159,"offset":19070}}},{"type":"text","value":" , which returns a type ","position":{"start":{"line":300,"column":159,"offset":19070},"end":{"line":300,"column":183,"offset":19094}}},{"type":"raw","value":"<code class=\"language-text\">future</code>","position":{"start":{"line":300,"column":183,"offset":19094},"end":{"line":300,"column":191,"offset":19102}}},{"type":"text","value":" , which is the result of the computation in parallel.","position":{"start":{"line":300,"column":191,"offset":19102},"end":{"line":300,"column":245,"offset":19156}}}],"position":{"start":{"line":300,"column":1,"offset":18912},"end":{"line":300,"column":245,"offset":19156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Then, when we want to turn this ","position":{"start":{"line":301,"column":3,"offset":19159},"end":{"line":301,"column":35,"offset":19191}}},{"type":"raw","value":"<code class=\"language-text\">future</code>","position":{"start":{"line":301,"column":35,"offset":19191},"end":{"line":301,"column":43,"offset":19199}}},{"type":"text","value":" value into a regular value, say to actually use it in a function, we simply call ","position":{"start":{"line":301,"column":43,"offset":19199},"end":{"line":301,"column":125,"offset":19281}}},{"type":"raw","value":"<code class=\"language-text\">sync</code>","position":{"start":{"line":301,"column":125,"offset":19281},"end":{"line":301,"column":131,"offset":19287}}},{"type":"text","value":" on the future typed value, which forces our function to wait till that operation is run before proceeding, evaluating the ","position":{"start":{"line":301,"column":131,"offset":19287},"end":{"line":301,"column":254,"offset":19410}}},{"type":"raw","value":"<code class=\"language-text\">future</code>","position":{"start":{"line":301,"column":254,"offset":19410},"end":{"line":301,"column":262,"offset":19418}}},{"type":"text","value":" value to it’s underlying data type","position":{"start":{"line":301,"column":262,"offset":19418},"end":{"line":301,"column":297,"offset":19453}}}],"position":{"start":{"line":301,"column":1,"offset":19157},"end":{"line":301,"column":297,"offset":19453}}},{"type":"text","value":"\n"}],"position":{"start":{"line":300,"column":1,"offset":18912},"end":{"line":301,"column":297,"offset":19453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is a very common way of doing parallelism for stuff like GUIs on the web, as JS offers a similar primitive called a ","position":{"start":{"line":303,"column":1,"offset":19455},"end":{"line":303,"column":122,"offset":19576}}},{"type":"raw","value":"<code class=\"language-text\">Promise</code>","position":{"start":{"line":303,"column":122,"offset":19576},"end":{"line":303,"column":131,"offset":19585}}},{"type":"text","value":" , where we want the main thread of computation to continue running, but we wish to have some code that will run due to some event happening on the user’s end.","position":{"start":{"line":303,"column":131,"offset":19585},"end":{"line":303,"column":290,"offset":19744}}}],"position":{"start":{"line":303,"column":1,"offset":19455},"end":{"line":303,"column":290,"offset":19744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, data dependencies are determined at runtime, which allows us to focus on making sure that the program is right rather than having to worry about ensuring computations run in parallel lack dependencies ( our type checker will complain if we do not sync beforehand ). ","position":{"start":{"line":305,"column":1,"offset":19746},"end":{"line":305,"column":273,"offset":20018}}}],"position":{"start":{"line":305,"column":1,"offset":19746},"end":{"line":305,"column":273,"offset":20018}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An example of code that would use this primitive is the following:","position":{"start":{"line":307,"column":1,"offset":20020},"end":{"line":307,"column":67,"offset":20086}}}],"position":{"start":{"line":307,"column":1,"offset":20020},"end":{"line":307,"column":67,"offset":20086}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> spawn<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> spawn<span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\nz <span class=\"token operator\">+</span> sync<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> sync<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":309,"column":1,"offset":20088},"end":{"line":315,"column":4,"offset":20186}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, the main function will continue running after x and y are scheduled to run, and only get their value when they are sync-ed, allowing the runtime environment to run them in parallel.","position":{"start":{"line":317,"column":1,"offset":20188},"end":{"line":317,"column":188,"offset":20375}}}],"position":{"start":{"line":317,"column":1,"offset":20188},"end":{"line":317,"column":188,"offset":20375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":319,"column":1,"offset":20377},"end":{"line":319,"column":4,"offset":20380}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Formalism of Futures","position":{"start":{"line":321,"column":5,"offset":20386},"end":{"line":321,"column":29,"offset":20410}}}],"position":{"start":{"line":321,"column":1,"offset":20382},"end":{"line":321,"column":29,"offset":20410}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Of course, as we need to introduce the ","position":{"start":{"line":323,"column":1,"offset":20412},"end":{"line":323,"column":40,"offset":20451}}},{"type":"raw","value":"<code class=\"language-text\">future</code>","position":{"start":{"line":323,"column":40,"offset":20451},"end":{"line":323,"column":48,"offset":20459}}},{"type":"text","value":" type, we need to add ","position":{"start":{"line":323,"column":48,"offset":20459},"end":{"line":323,"column":70,"offset":20481}}},{"type":"raw","value":"<code class=\"language-text\">future</code>","position":{"start":{"line":323,"column":70,"offset":20481},"end":{"line":323,"column":78,"offset":20489}}},{"type":"text","value":" as a type to our type system:","position":{"start":{"line":323,"column":78,"offset":20489},"end":{"line":323,"column":108,"offset":20519}}}],"position":{"start":{"line":323,"column":1,"offset":20412},"end":{"line":323,"column":108,"offset":20519}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">tau <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> future<span class=\"token punctuation\">(</span>tau<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":325,"column":1,"offset":20521},"end":{"line":327,"column":4,"offset":20553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice that this expression is a type constructor. This is because, after we sync the future, we’ll remove the future tag and treat the value as a normal value of  that type.","position":{"start":{"line":329,"column":1,"offset":20555},"end":{"line":329,"column":175,"offset":20729}}}],"position":{"start":{"line":329,"column":1,"offset":20555},"end":{"line":329,"column":175,"offset":20729}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With this added, we’ll also need to add introductory and elimination forms of future to our language:","position":{"start":{"line":331,"column":1,"offset":20731},"end":{"line":331,"column":102,"offset":20832}}}],"position":{"start":{"line":331,"column":1,"offset":20731},"end":{"line":331,"column":102,"offset":20832}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">e <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> spawn<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which is the introductory form <span class=\"token keyword\">for</span> a future\n      <span class=\"token operator\">|</span> sync<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> which is the elimination form <span class=\"token keyword\">for</span> a future</code></pre></div>","position":{"start":{"line":333,"column":1,"offset":20834},"end":{"line":336,"column":4,"offset":20966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Like option types, these have a fairly simply recursive form to them, as they simply wrap around a value to buffer it for a parallel  or asynchronous computation. ","position":{"start":{"line":338,"column":1,"offset":20968},"end":{"line":338,"column":164,"offset":21131}}}],"position":{"start":{"line":338,"column":1,"offset":20968},"end":{"line":338,"column":164,"offset":21131}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Static Semantics are also really easy to see. For spawn:","position":{"start":{"line":340,"column":1,"offset":21133},"end":{"line":340,"column":61,"offset":21193}}}],"position":{"start":{"line":340,"column":1,"offset":21133},"end":{"line":340,"column":61,"offset":21193}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>e</mi><mo>:</mo><mi>τ</mi></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>s</mi><mi>p</mi><mi>a</mi><mi>w</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>f</mi><mi>u</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>τ</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\Gamma \\vdash e : \\tau}{\\Gamma \\vdash spawn(e) : future(\\tau)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.30744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathdefault\">n</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":342,"column":1,"offset":21195},"end":{"line":342,"column":73,"offset":21267}}}],"position":{"start":{"line":342,"column":1,"offset":21195},"end":{"line":342,"column":73,"offset":21267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which makes sense, as we only need to make sure that the value inside is of valid type and that we output a future type with that inner type. ","position":{"start":{"line":344,"column":1,"offset":21269},"end":{"line":344,"column":143,"offset":21411}}}],"position":{"start":{"line":344,"column":1,"offset":21269},"end":{"line":344,"column":143,"offset":21411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For sync:","position":{"start":{"line":346,"column":1,"offset":21413},"end":{"line":346,"column":10,"offset":21422}}}],"position":{"start":{"line":346,"column":1,"offset":21413},"end":{"line":346,"column":10,"offset":21422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>e</mi><mo>:</mo><mi>f</mi><mi>u</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>τ</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>s</mi><mi>y</mi><mi>n</mi><mi>c</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>τ</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\Gamma \\vdash e : future(\\tau)}{\\Gamma \\vdash sync(e) : \\tau}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":348,"column":1,"offset":21424},"end":{"line":348,"column":72,"offset":21495}}}],"position":{"start":{"line":348,"column":1,"offset":21424},"end":{"line":348,"column":72,"offset":21495}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which also makes sense, as we’re simply “unwrapping” the inner type from the future value, which we trust will happen at some point. ","position":{"start":{"line":350,"column":1,"offset":21497},"end":{"line":350,"column":134,"offset":21630}}}],"position":{"start":{"line":350,"column":1,"offset":21497},"end":{"line":350,"column":134,"offset":21630}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lastly, if we look at the ","position":{"start":{"line":352,"column":1,"offset":21632},"end":{"line":352,"column":27,"offset":21658}}},{"type":"raw","value":"<code class=\"language-text\">val</code>","position":{"start":{"line":352,"column":27,"offset":21658},"end":{"line":352,"column":32,"offset":21663}}},{"type":"text","value":" and ","position":{"start":{"line":352,"column":32,"offset":21663},"end":{"line":352,"column":37,"offset":21668}}},{"type":"raw","value":"<code class=\"language-text\">eval</code>","position":{"start":{"line":352,"column":37,"offset":21668},"end":{"line":352,"column":43,"offset":21674}}},{"type":"text","value":" judgments for our language, we can notice that they are deceptively simple also, with spawn being a value:","position":{"start":{"line":352,"column":43,"offset":21674},"end":{"line":352,"column":150,"offset":21781}}}],"position":{"start":{"line":352,"column":1,"offset":21632},"end":{"line":352,"column":150,"offset":21781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow></mrow><mtext>spawn(e) val</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{}{\\text{spawn(e) val}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.613em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.677em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">spawn(e) val</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":354,"column":1,"offset":21783},"end":{"line":354,"column":33,"offset":21815}}}],"position":{"start":{"line":354,"column":1,"offset":21783},"end":{"line":354,"column":33,"offset":21815}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"and sync taking a future value, and evaluating it:","position":{"start":{"line":356,"column":1,"offset":21817},"end":{"line":356,"column":51,"offset":21867}}}],"position":{"start":{"line":356,"column":1,"offset":21817},"end":{"line":356,"column":51,"offset":21867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>e</mi><mo>⇓</mo><mtext>spawn</mtext><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mtext>   </mtext><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>⇓</mo><mi>v</mi></mrow><mrow><mtext>sync(e)</mtext><mo>⇓</mo><mi>v</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e \\Downarrow \\text{spawn}(e&#x27;)\\ \\ \\  e&#x27;\\Downarrow v} {\\text{sync(e)}\\Downarrow v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.364892em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">sync(e)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">spawn</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":358,"column":1,"offset":21869},"end":{"line":358,"column":91,"offset":21959}}}],"position":{"start":{"line":358,"column":1,"offset":21869},"end":{"line":358,"column":91,"offset":21959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So - what gives? Well, the language actually says that we don’t need to reason about these things ourself. We can simply focus on making sure our spawns and syncs type-check, and the computation will happen. ","position":{"start":{"line":360,"column":1,"offset":21961},"end":{"line":360,"column":209,"offset":22169}}}],"position":{"start":{"line":360,"column":1,"offset":21961},"end":{"line":360,"column":209,"offset":22169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Like fork-join parallelism, we could try and make costs for everything but, as we do not force the spawns to run in parallel immediately, they might be run sequentially, which all depends on the underlying runtime system. This makes cost-semantics tricky, and thus harder to reason about work and depth. ","position":{"start":{"line":362,"column":1,"offset":22171},"end":{"line":362,"column":305,"offset":22475}}}],"position":{"start":{"line":362,"column":1,"offset":22171},"end":{"line":362,"column":305,"offset":22475}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Instead, we could try to get what are known as “Explicit Parallel Semantics”. The idea here is that we create a new judgement, which looks like the following:","position":{"start":{"line":364,"column":1,"offset":22477},"end":{"line":364,"column":159,"offset":22635}}}],"position":{"start":{"line":364,"column":1,"offset":22477},"end":{"line":364,"column":159,"offset":22635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>u</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e || \\mu \\Downarrow e&#x27; || u&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span>","position":{"start":{"line":366,"column":1,"offset":22637},"end":{"line":366,"column":33,"offset":22669}}}],"position":{"start":{"line":366,"column":1,"offset":22637},"end":{"line":366,"column":33,"offset":22669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, like in iterative programming, we don’t just reason about input output behavior, but we reason about something called a ","position":{"start":{"line":368,"column":1,"offset":22671},"end":{"line":368,"column":127,"offset":22797}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"futurepool","position":{"start":{"line":368,"column":128,"offset":22798},"end":{"line":368,"column":138,"offset":22808}}}],"position":{"start":{"line":368,"column":127,"offset":22797},"end":{"line":368,"column":139,"offset":22809}}},{"type":"text","value":".","position":{"start":{"line":368,"column":139,"offset":22809},"end":{"line":368,"column":140,"offset":22810}}}],"position":{"start":{"line":368,"column":1,"offset":22671},"end":{"line":368,"column":140,"offset":22810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Futurepool:","position":{"start":{"line":370,"column":2,"offset":22813},"end":{"line":370,"column":13,"offset":22824}}}],"position":{"start":{"line":370,"column":1,"offset":22812},"end":{"line":370,"column":14,"offset":22825}}},{"type":"text","value":" A location where we can check to see if a future has been evaluated or not, and force a computation to evaluate otherwise.","position":{"start":{"line":370,"column":14,"offset":22825},"end":{"line":370,"column":137,"offset":22948}}}],"position":{"start":{"line":370,"column":1,"offset":22812},"end":{"line":370,"column":137,"offset":22948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thus, we could have the following rule, where we create a new item in the future pool related to our future in spawn:","position":{"start":{"line":372,"column":1,"offset":22950},"end":{"line":372,"column":118,"offset":23067}}}],"position":{"start":{"line":372,"column":1,"offset":22950},"end":{"line":372,"column":118,"offset":23067}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow></mrow><mrow><mtext>spawn(e)</mtext><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><mi mathvariant=\"normal\">#</mi><mi>l</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo separator=\"true\">,</mo><mi>l</mi><mo>→</mo><mi>e</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{}{\\text{spawn(e)}||\\mu \\Downarrow \\#l ||\\mu, l \\rightarrow e }</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.613em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.677em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">spawn(e)</span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">#</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">e</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":374,"column":1,"offset":23069},"end":{"line":374,"column":73,"offset":23141}}}],"position":{"start":{"line":374,"column":1,"offset":23069},"end":{"line":374,"column":73,"offset":23141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Where we allocated some memory location, l, that lets us keep track of the new computation.","position":{"start":{"line":376,"column":1,"offset":23143},"end":{"line":376,"column":92,"offset":23234}}}],"position":{"start":{"line":376,"column":1,"offset":23143},"end":{"line":376,"column":92,"offset":23234}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And then, in sync, we can force our computation to happen, and grab the value for future use:","position":{"start":{"line":378,"column":1,"offset":23236},"end":{"line":378,"column":94,"offset":23329}}}],"position":{"start":{"line":378,"column":1,"offset":23236},"end":{"line":378,"column":94,"offset":23329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>e</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><mi mathvariant=\"normal\">#</mi><mi>l</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>μ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>   </mtext><msup><mi>u</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>l</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>   </mtext><mi>e</mi><mo>⇓</mo><mi>v</mi></mrow><mrow><mtext>sync(e)</mtext><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><mi>v</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>μ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">[</mo><mi>l</mi><mo>→</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e||\\mu \\Downarrow \\# l || \\mu&#x27; \\ \\ \\ u&#x27;(l) = e&#x27; \\ \\ \\ e\\Downarrow v}{\\text{sync(e)}||\\mu \\Downarrow v || \\mu&#x27; [l \\rightarrow v]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.364892em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">sync(e)</span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6778919999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">#</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathdefault\">u</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":380,"column":1,"offset":23331},"end":{"line":380,"column":139,"offset":23469}}}],"position":{"start":{"line":380,"column":1,"offset":23331},"end":{"line":380,"column":139,"offset":23469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"where we look up the value of the thread, confirm that it’s happened, and then use that value in our expression. ","position":{"start":{"line":382,"column":1,"offset":23471},"end":{"line":382,"column":114,"offset":23584}}}],"position":{"start":{"line":382,"column":1,"offset":23471},"end":{"line":382,"column":114,"offset":23584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once again, we can see how adding language constructs can be a tricky thing. While futures are great, they add a layer of abstraction, and thus don’t let us reason as easily about the runtime of our workload. On the other hand, explicitly forking and joining sub expressions can be a pain, especially if you’re just trying to get a webpage running, and so having that makes like easier and more performant. Like all good things, there’s both positives and negatives to each.","position":{"start":{"line":384,"column":1,"offset":23586},"end":{"line":384,"column":475,"offset":24060}}}],"position":{"start":{"line":384,"column":1,"offset":23586},"end":{"line":384,"column":475,"offset":24060}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you want to learn about the mathematical formalism behind futures, look into the Async co-monad or the Promise Monad. These add to this idea and show how JS makes this construct usable, even if relatively unintuitive.","position":{"start":{"line":386,"column":1,"offset":24062},"end":{"line":386,"column":221,"offset":24282}}}],"position":{"start":{"line":386,"column":1,"offset":24062},"end":{"line":386,"column":221,"offset":24282}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":386,"column":221,"offset":24282}}}}