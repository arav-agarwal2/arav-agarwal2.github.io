{"expireTime":9007200846135681000,"key":"transformer-remark-markdown-html-96b96ddb4d67a6081ef5efb1befef865-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>So, over the last few lectures we’ve covered the ideas of parallelism. </p>\n<p>In particular, we’ve covered the ideas about <em>determinism</em>, where it doesn’t matter how you split up the program, allowing us to program in parallel efficiently.</p>\n<ul>\n<li>Obviously, we get this parallelism in a pure expression language, so in Data Parallel Haskell, among other things, we get this advantage</li>\n<li>We also get it in an imperative language w/ ownership and unique borrowing, like Rust</li>\n</ul>\n<p>In Rust, for example, the following you not be allowed:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">fn main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> mut s <span class=\"token operator\">=</span> <span class=\"token module variable\">String</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>from<span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">let</span> handle <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>spawn<span class=\"token punctuation\">(</span><span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span>\n                  s<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">_</span>str<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">let</span> handle2 <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>spawn<span class=\"token punctuation\">(</span><span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span>\n                  s<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">_</span>str<span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       println<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Rust will complain about this, as the thread borrows s but the thread’s lifetime is larger than s, which could allow nondeterminate programs.</p>\n<p>But, we still have determinacy. </p>\n<p>However, last lecture we covered concurrency, where we had different processes interaction non-deterministically through side effect manipulation. </p>\n<p>To concretely reason about it, we created a <em>process calculus</em>. This allowed us to reason about non-determinate programs, even though the task became harder to do so.</p>\n<p>However, when we were doing that, we had global signals, so every send or receive was heard by all parties. This leads to our first problem: we wish to have some sense of a private channel, where we can communicate our data secretly. </p>\n<ul>\n<li>Scala does this in its actor model</li>\n</ul>\n<p>It turns out, there’s another type of concurrency we can look at, known as “distributed computing”. This is like concurrency, but instead of ordering processes non-deterministically via time, we only give some processes access to local resources.</p>\n<ul>\n<li>An example of this could be a web client and server application. Each has access to its own systems, like a database or the state of the user’s UI.</li>\n</ul>\n<p>To formally reason about these ideas, we can simply introduce the idea of a world, a space where such actions occur:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>:</mo><mi>τ</mi><mi mathvariant=\"normal\">@</mi><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">e: \\tau @ w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord\">@</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span></p>\n<p>Where we limit the execution of some expression/command of type tau, to some world w, which allows us to segregate functionality between parties. In our web-server instance, this becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">        queryDB<span class=\"token punctuation\">:</span> <span class=\"token module variable\">Query</span> <span class=\"token operator\">-></span> <span class=\"token module variable\">Result</span> <span class=\"token operator\">@</span> server\n        getFormData<span class=\"token punctuation\">:</span> unit <span class=\"token operator\">-></span> <span class=\"token module variable\">FormData</span> <span class=\"token operator\">@</span> client</code></pre></div>\n<p>This allows us to combine both server and client code into one file, an approach known as “tier-less web programming”.</p>\n<p>This approach exists today, in the following platforms:</p>\n<ul>\n<li>Links language</li>\n<li>ML5 language</li>\n<li>OCaml library called Eliom</li>\n</ul>\n<hr>\n<p>An alternative way to do this is through “Remote Procedure Calls”, or RPCs. Formally, this allows one computer, commonly called the <em>master</em>, to execute a function on another computer, commonly called the <em>slave</em>. This allows for the creation of distributed file systems and other really cool systems-level tech, and keeps programmers from needing to explicitly worry about it. Formally, one could write the following rule to reason about RPCs:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>e</mi><mo>:</mo><mi>τ</mi><mi mathvariant=\"normal\">@</mi><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mtext>    </mtext><mi>τ</mi><mtext> mobile</mtext></mrow><mrow><mtext>at w’ do e: </mtext><mi>τ</mi><mi mathvariant=\"normal\">@</mi><mi>w</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e:\\tau @ w&#x27; \\ \\ \\ \\ \\tau \\text{\\ mobile}}{\\text{at w&#x27; do e: } \\tau @ w}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.114892em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">at w’ do e: </span></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord\">@</span><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord\">@</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord text\"><span class=\"mord\"> mobile</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>Here, all we are saying is that,  if we can get something from the distributed call, a so-called “mobile type”, which refers to the fact that the type can be sent over a network, then we execute it at the specified location and return, as usual. </p>\n<p>This is the magic behind clean file system interfaces like AWS or AFS, the Andrew File System developed by Carnegie Mellon, as it allows us to make use of more computers, but allows us to tighten security so that we do not accidentally break anything.</p>"}