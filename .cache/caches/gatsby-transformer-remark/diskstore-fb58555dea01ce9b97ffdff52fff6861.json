{"expireTime":9007200846133798000,"key":"transformer-remark-markdown-html-9210b42e1d8d678e827b22504a8916fb-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>So far, we’ve been assuming automatic memory management.</p>\n<p>If we have the following function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> f y <span class=\"token operator\">=</span> \n   <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> ref <span class=\"token number\">0</span> <span class=\"token keyword\">in</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span>  \n <span class=\"token operator\">!</span>counter\n<span class=\"token keyword\">in</span> f <span class=\"token number\">3</span></code></pre></div>\n<p>So here, when counter is stops being used, (i.e. at the end, at !counter), the OCaml <em>garbage collector</em> deallocates that memory for another program to use automatically, making memory management easy, but less efficient than C/C++</p>\n<p>Garbage Collector: A program that manages the references to memory a program uses, and allocates/deallocates the memory depending on what and how it’s currently being used.</p>\n<p>These programs have to be really clever and really sophisticated to work well, as they need to be able to handle a lot of strange scenarios, like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> f y <span class=\"token operator\">=</span> \n   <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> ref <span class=\"token number\">0</span>  <span class=\"token keyword\">in</span>\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  counter\n<span class=\"token keyword\">in</span> \n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> f y <span class=\"token keyword\">in</span>\n  <span class=\"token operator\">!</span>x</code></pre></div>\n<p>So here, we still can access the counter data, as we pass that data’s location into another variable. As a result, we need to not deallocate it, though if you had assumed references can’t go up a level in the stack that would have changed this function’s behavior. </p>\n<p>Besides this scenario, you also have many more scenarios. For example, references can be:</p>\n<ul>\n<li>Bound to variables, like counter</li>\n<li>Placed inside other data structures</li>\n<li>Returned from functions</li>\n<li>Bound to multiple variables</li>\n</ul>\n<p>and so on. </p>\n<p>As you can see, Garbage Collection is a very complicated job, and thus cannot be done at compile time. Thus, OCaml, and other programs like it, uses a run-time garbage collector, which has to stop program execution every now and then to run these functions. It’s a very expensive operation, but it’s needed to maintain this abstraction.</p>\n<p>So while GC is safe, so it won’t have use after free bugs and double free bugs, it’s slowww</p>\n<p>Whereas, in C/C++, we have manual memory management, which is really cheap, but unsafe, via use after free bugs and double free bugs</p>\n<hr>\n<h2>Can we do better?</h2>\n<p>So, for a while, we had this dichotomy between memory-safe, but garbage collected, languages and non memory-safe, but fast, languages. Enter Rust:</p>\n<p>Rust is a memory-safe imperative language without manual memory management and no garbage collector</p>\n<p>This makes it both safe and cheap, though it does complicate memory management to achieve this.</p>\n<p>It’s also being used in a lot of places, from Firefox, to Dropbox, to Microsoft.</p>\n<hr>\n<h2>Rust: Basic Principles</h2>\n<p>Before we learn what makes Rust tick, let’s go through and learn a bit of it beforehand.</p>\n<p>Firstly, Rust is an expression oriented language:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<p>This is an expression with type i32 and value b. </p>\n<p>It also has all of the stuff we’re been talking about, and variables are given meaning through substitution like everything else we’ve been talking about. </p>\n<p>Secondly, Rust distinguishes between stack and heap variables:</p>\n<p>For stack variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// The let keyword defines a stack variable so:</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// On the stack</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// On the stack</span>\n<span class=\"token punctuation\">...</span>\n<span class=\"token comment\">// So even the following string is an immutable stack variable</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token comment\">// type: str ( with known size ) </span>\n<span class=\"token comment\">// As a result, we cannot concatenate strings directly:</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// INVALID, as we do not know the size of x+y at compile time</span>\n  z <span class=\"token comment\">// No explicit return as it's an expression oriented language</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For dynamic variables, you use constructors:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// To make a heap-allocated string:</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//x:String</span></code></pre></div>\n<p>Thus, on the stack, x has the following structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">x <span class=\"token punctuation\">-></span> <span class=\"token operator\">|</span>pointer to the actual heap memory<span class=\"token operator\">|</span> length \n     <span class=\"token operator\">|</span> <span class=\"token function\">capacity</span> <span class=\"token punctuation\">(</span>like vector grow from <span class=\"token number\">281</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But, on the heap, there’s the actual string contents. </p>\n<p>Again, this all makes sense, but how does Rust actually free heap-allocated memory without manual memory management or a garbage collector?</p>\n<hr>\n<h3>How Rust free’s heap-allocated memory</h3>\n<p>If we had the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, Rust says that, as the variable becomes out-of-scope, it’ll get freed at the end of the scope, which it figures out at compile time through its lifetime static semantics system.</p>\n<p>Now that works and all, but let’s consider what would happen if we were to look at another example, assuming this is strictly how Rust works:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, if we were to follow that simple strategy, we’d run into a problem. After we transfer the pointer value to y, as y goes out of scope, y’s data would be erased. However, as y’s data is x’s data, x’s data would be erased, and we would have a <em>use-after-free</em> bug in our system. </p>\n<p>However, what may be surprising here is that Rust calls the above program “illtyped” in its language, so the above program won’t even compile. How come? Rust adds a new concept called ownership to its type system, so in Rust:</p>\n<ul>\n<li>Every piece of Heap Data has a unique owner, which refers to the data that points to it. In our example, x was the original owner of this data.</li>\n<li>Ownership can be transferred, so when we wrote <code class=\"language-text\">let y = x</code> , Rust moved the ownership of x from x to y, making y the unique owner ( and all of this is done statically! )</li>\n<li>Deallocation occurs when the owner dies. Thus, after y goes out of scope, y’s heap data is freed, and so when x tries to print that data, we run into ill-typed, as x doesn’t own any data!</li>\n</ul>\n<p>Thus, even the following example is poorly-typed, as x isn’t the owner of the string anymore:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OK</span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Not OK, as x is not the owner.</span></code></pre></div>\n<p>With this concept, then, Rust is able to make all of the memory management calls compile-time bound, keeping memory management fast while still easy for basic uses.</p>\n<p>For simple immutable stack data, Rust has no sense of ownership. Thus, the following code works:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// As x is a simple immutable, Rust just makes a copy</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// So this is still okay</span></code></pre></div>\n<p>Additionally, there are explicit methods to copy Heap variables:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Copy of x, so we don't need to worry changing ownership</span></code></pre></div>\n<p>Now that we understand the central concept that makes Rust useful, ownership, let’s dig a bit deeper into how ownership transfers and how it changes hands.</p>\n<hr>\n<h2>Changing Hands: Rust Ownership Transfer</h2>\n<p>Firstly, ownership is moved in and out of functions. If we had the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\ns \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>First, x transfers its ownership of Hello to identity’s s, as it transfers the ownership to the inner block. </p>\n<p>Then, the identity function transfer’s its ownership to y, as y is assigned the reference value after identity is called.</p>\n<p>Thus, the following still works:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But the following does not, as x transfers ownership to identity:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>While that’s nice conceptually, this does lead to a few new problems we have to consider when writing code. For example, consider the following code, assuming a length function <code class=\"language-text\">len : String -&gt; i32</code> :</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Whoops!</span></code></pre></div>\n<p>So we have a new problem; how do we call functions without transferring ownership to them, as we want to call length and other functions on Strings without needing to worry about ownership all of the time. </p>\n<hr>\n<h3>A First Attempt: Explicitly Moving the Resource in and Out</h3>\n<p>Well, one thing we could do is we could simply redefine length to return both the length and the string itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">..</span>\n  <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Move ownership to len, which moves it back to x.</span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OK, as we move the transfer back to x.</span></code></pre></div>\n<p>However, this has the downside of complicating our functions, and it can lead to potentially a function taking 8 things returning 8 or more things ( which can happen in systems level code )</p>\n<p>Obviously, as Rust is so used, this can’t be how Rust does it; no one would want to work in it.</p>\n<hr>\n<h3>A Second Attempt : Borrowing</h3>\n<p>So, what if instead of passing the string itself as an argument, what if we passed a reference to the string as an argument? Well, it turns out by doing this, Rust does not transfer ownership to the calling function. Therefore, we’re able to let a function “borrow” our string resource, compute its value, and transfer ownership back to us:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">len</span> <span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">...</span>\n   n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Thus, x is still the owner, but len borrows access</span></code></pre></div>\n<p>This is how Rust generally works with data when dealing with immutable functions, but what about mutable functions / methods?</p>\n<hr>\n<h3>Mutability in Rust</h3>\n<p>Say we wish to follow the time-honored tradition of programmers and write the following Hello World program:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OOF</span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>If we were to compile this program, the second line will cause a compilation error, as we haven’t told Rust we want our data to be mutable. Thus, for a variable to be mutable, and for us to have a mutable piece of data, we need to add the <code class=\"language-text\">mut</code> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//All good, so we mutate in place. </span>\n<span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}!\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>Now, let’s say we had a function, f, which edits a string in place, and we wanted to use it with a reference. We can’t do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is because <code class=\"language-text\">&amp;x</code> creates a static, or immutable, reference to x in Rust. To make it mutable, we need to add the mut keyword again:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">mut</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That allows us to mutate the data in the inner function, and thus use our new heap data in all the ways we’d want to for most projects.</p>\n<hr>\n<h1>Summary</h1>\n<ul>\n<li>Rust manages to not have explicit memory management AND not have a garbage collector by introducing a new concept: the owner</li>\n<li>Each piece of heap data has a unique owner, and frees when its owner dies</li>\n<li>Through borrowing and the <code class=\"language-text\">mut</code> keyword, we can have owners share resourced with functions without transferring ownership, allowing for usage like RAII in C++.</li>\n</ul>"}