{"expireTime":9007200846508353000,"key":"transformer-remark-markdown-html-ast-473e1149ea0840b1671cb120ca5a0914-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So so far, we’ve been programming with pure expressions, without any changeable state.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":87,"offset":86}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":87,"offset":86}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, to reason about a function, we simply had to understand how input relates to output and, as for us variable names got meaning from substitution, we knew that, given some input, we knew what the output was. So for example:","position":{"start":{"line":3,"column":1,"offset":88},"end":{"line":3,"column":226,"offset":313}}}],"position":{"start":{"line":3,"column":1,"offset":88},"end":{"line":3,"column":226,"offset":313}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token operator\">//</span> <span class=\"token module variable\">If</span> we had a <span class=\"token keyword\">function</span> f <span class=\"token keyword\">with</span> f<span class=\"token punctuation\">:</span> <span class=\"token module variable\">Num</span> <span class=\"token operator\">-></span> <span class=\"token module variable\">Num</span> <span class=\"token operator\">-></span> <span class=\"token module variable\">Num</span> list <span class=\"token operator\">-></span> <span class=\"token module variable\">Num</span>\n<span class=\"token operator\">//</span> <span class=\"token module variable\">And</span> <span class=\"token keyword\">if</span> we had the following program<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">let</span> xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">let</span> x1 <span class=\"token operator\">=</span> f <span class=\"token number\">0</span> <span class=\"token number\">5</span> xs <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> f <span class=\"token number\">0</span> <span class=\"token number\">5</span> xs <span class=\"token keyword\">in</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token module variable\">Part</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":5,"column":1,"offset":315},"end":{"line":12,"column":4,"offset":520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then, in Part A of the code, ","position":{"start":{"line":14,"column":1,"offset":522},"end":{"line":14,"column":30,"offset":551}}},{"type":"raw","value":"<code class=\"language-text\">xs == [1;2;3]</code>","position":{"start":{"line":14,"column":30,"offset":551},"end":{"line":14,"column":45,"offset":566}}},{"type":"text","value":" and ","position":{"start":{"line":14,"column":45,"offset":566},"end":{"line":14,"column":50,"offset":571}}},{"type":"raw","value":"<code class=\"language-text\">x1 == x2</code>","position":{"start":{"line":14,"column":50,"offset":571},"end":{"line":14,"column":60,"offset":581}}},{"type":"text","value":" , no matter what, as f can’t modify the underlying code in any manner","position":{"start":{"line":14,"column":60,"offset":581},"end":{"line":14,"column":130,"offset":651}}}],"position":{"start":{"line":14,"column":1,"offset":522},"end":{"line":14,"column":130,"offset":651}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, in Python and other so-called “imperative” languages, we could have the following:","position":{"start":{"line":16,"column":1,"offset":653},"end":{"line":16,"column":92,"offset":744}}}],"position":{"start":{"line":16,"column":1,"offset":653},"end":{"line":16,"column":92,"offset":744}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>xs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\txs<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> b\n  <span class=\"token keyword\">return</span> xs<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\nx1 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>xs<span class=\"token punctuation\">)</span>\nx2 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>xs<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":746},"end":{"line":25,"column":4,"offset":844}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this case, as xs is modified, ","position":{"start":{"line":27,"column":1,"offset":846},"end":{"line":27,"column":34,"offset":879}}},{"type":"raw","value":"<code class=\"language-text\">xs != [1,2,3]</code>","position":{"start":{"line":27,"column":34,"offset":879},"end":{"line":27,"column":49,"offset":894}}},{"type":"text","value":" and ","position":{"start":{"line":27,"column":49,"offset":894},"end":{"line":27,"column":54,"offset":899}}},{"type":"raw","value":"<code class=\"language-text\">x1!=x2</code>","position":{"start":{"line":27,"column":54,"offset":899},"end":{"line":27,"column":62,"offset":907}}},{"type":"text","value":" .","position":{"start":{"line":27,"column":62,"offset":907},"end":{"line":27,"column":64,"offset":909}}}],"position":{"start":{"line":27,"column":1,"offset":846},"end":{"line":27,"column":64,"offset":909}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":29,"column":1,"offset":911},"end":{"line":29,"column":4,"offset":914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, we’ve come to a fundamental new idea: Mutation","position":{"start":{"line":31,"column":1,"offset":916},"end":{"line":31,"column":51,"offset":966}}}],"position":{"start":{"line":31,"column":1,"offset":916},"end":{"line":31,"column":51,"offset":966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Mutation","position":{"start":{"line":33,"column":2,"offset":969},"end":{"line":33,"column":10,"offset":977}}}],"position":{"start":{"line":33,"column":1,"offset":968},"end":{"line":33,"column":11,"offset":978}}},{"type":"text","value":": Allows you to modify memory in-place, without preserving previous versions","position":{"start":{"line":33,"column":11,"offset":978},"end":{"line":33,"column":87,"offset":1054}}}],"position":{"start":{"line":33,"column":1,"offset":968},"end":{"line":33,"column":87,"offset":1054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a result of this idea / this operation, we need to change a few of our ideas:","position":{"start":{"line":35,"column":1,"offset":1056},"end":{"line":35,"column":81,"offset":1136}}}],"position":{"start":{"line":35,"column":1,"offset":1056},"end":{"line":35,"column":81,"offset":1136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We need to distinguish variables from reference to memory locations.","position":{"start":{"line":37,"column":4,"offset":1141},"end":{"line":37,"column":72,"offset":1209}}}],"position":{"start":{"line":37,"column":4,"offset":1141},"end":{"line":37,"column":72,"offset":1209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Variables are given meaning by substitution (Seriously, we need this on a shirt for this class)","position":{"start":{"line":38,"column":7,"offset":1216},"end":{"line":38,"column":102,"offset":1311}}}],"position":{"start":{"line":38,"column":5,"offset":1214},"end":{"line":38,"column":102,"offset":1311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Memory locations are given meaning by so-called ","position":{"start":{"line":39,"column":7,"offset":1318},"end":{"line":39,"column":55,"offset":1366}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"read","position":{"start":{"line":39,"column":57,"offset":1368},"end":{"line":39,"column":61,"offset":1372}}}],"position":{"start":{"line":39,"column":55,"offset":1366},"end":{"line":39,"column":63,"offset":1374}}},{"type":"text","value":" and ","position":{"start":{"line":39,"column":63,"offset":1374},"end":{"line":39,"column":68,"offset":1379}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"write","position":{"start":{"line":39,"column":70,"offset":1381},"end":{"line":39,"column":75,"offset":1386}}}],"position":{"start":{"line":39,"column":68,"offset":1379},"end":{"line":39,"column":77,"offset":1388}}},{"type":"text","value":" operations","position":{"start":{"line":39,"column":77,"offset":1388},"end":{"line":39,"column":88,"offset":1399}}}],"position":{"start":{"line":39,"column":5,"offset":1316},"end":{"line":39,"column":88,"offset":1399}}},{"type":"text","value":"\n"}],"position":{"start":{"line":38,"column":5,"offset":1214},"end":{"line":39,"column":88,"offset":1399}}},{"type":"text","value":"\n"}],"position":{"start":{"line":37,"column":1,"offset":1138},"end":{"line":39,"column":88,"offset":1399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We lose many equivalencies, as functional ordering now matters.","position":{"start":{"line":40,"column":4,"offset":1403},"end":{"line":40,"column":67,"offset":1466}}}],"position":{"start":{"line":40,"column":1,"offset":1400},"end":{"line":40,"column":67,"offset":1466}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We now have two things to keep track of:","position":{"start":{"line":41,"column":4,"offset":1470},"end":{"line":41,"column":44,"offset":1510}}}],"position":{"start":{"line":41,"column":4,"offset":1470},"end":{"line":41,"column":44,"offset":1510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The input-output behavior of functions","position":{"start":{"line":42,"column":8,"offset":1518},"end":{"line":42,"column":46,"offset":1556}}}],"position":{"start":{"line":42,"column":5,"offset":1515},"end":{"line":42,"column":46,"offset":1556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Reads and writes to memory","position":{"start":{"line":43,"column":8,"offset":1564},"end":{"line":43,"column":34,"offset":1590}}}],"position":{"start":{"line":43,"column":5,"offset":1561},"end":{"line":43,"column":34,"offset":1590}}},{"type":"text","value":"\n"}],"position":{"start":{"line":42,"column":5,"offset":1515},"end":{"line":43,"column":34,"offset":1590}}},{"type":"text","value":"\n"}],"position":{"start":{"line":41,"column":1,"offset":1467},"end":{"line":43,"column":34,"offset":1590}}},{"type":"text","value":"\n"}],"position":{"start":{"line":37,"column":1,"offset":1138},"end":{"line":43,"column":34,"offset":1590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thus, this is why, in well-written and critical software, we separate pure from impure functions. It’s a lot easier to test/prove that a pure function works, so as long as we can separate the two as much as possible, we can move as much of the easily-verifiable logic to the pure side and keep the hard mutable parts as limited as possible.","position":{"start":{"line":45,"column":1,"offset":1592},"end":{"line":45,"column":341,"offset":1932}}}],"position":{"start":{"line":45,"column":1,"offset":1592},"end":{"line":45,"column":341,"offset":1932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":47,"column":1,"offset":1934},"end":{"line":47,"column":4,"offset":1937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In terms of nomenclature, mutation is known as a side-effect:","position":{"start":{"line":49,"column":1,"offset":1939},"end":{"line":49,"column":62,"offset":2000}}}],"position":{"start":{"line":49,"column":1,"offset":1939},"end":{"line":49,"column":62,"offset":2000}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Side-effects:","position":{"start":{"line":51,"column":2,"offset":2003},"end":{"line":51,"column":15,"offset":2016}}}],"position":{"start":{"line":51,"column":1,"offset":2002},"end":{"line":51,"column":16,"offset":2017}}},{"type":"text","value":" Observable events that occur during the ","position":{"start":{"line":51,"column":16,"offset":2017},"end":{"line":51,"column":57,"offset":2058}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"evaluation","position":{"start":{"line":51,"column":59,"offset":2060},"end":{"line":51,"column":69,"offset":2070}}}],"position":{"start":{"line":51,"column":57,"offset":2058},"end":{"line":51,"column":71,"offset":2072}}},{"type":"text","value":" (informally, the execution) of a program","position":{"start":{"line":51,"column":71,"offset":2072},"end":{"line":51,"column":112,"offset":2113}}}],"position":{"start":{"line":51,"column":1,"offset":2002},"end":{"line":51,"column":112,"offset":2113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some other notable side-effects include the following:","position":{"start":{"line":53,"column":1,"offset":2115},"end":{"line":53,"column":55,"offset":2169}}}],"position":{"start":{"line":53,"column":1,"offset":2115},"end":{"line":53,"column":55,"offset":2169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"I/O Effects, like printf, graphics, networking, and file reads/writes","position":{"start":{"line":55,"column":3,"offset":2173},"end":{"line":55,"column":72,"offset":2242}}}],"position":{"start":{"line":55,"column":1,"offset":2171},"end":{"line":55,"column":72,"offset":2242}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Performance Motivated Effects:","position":{"start":{"line":56,"column":3,"offset":2245},"end":{"line":56,"column":33,"offset":2275}}}],"position":{"start":{"line":56,"column":3,"offset":2245},"end":{"line":56,"column":33,"offset":2275}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Mutable Data Structures","position":{"start":{"line":57,"column":7,"offset":2282},"end":{"line":57,"column":30,"offset":2305}}}],"position":{"start":{"line":57,"column":5,"offset":2280},"end":{"line":57,"column":30,"offset":2305}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Caching/Memoization, seen in self-adjusting data structures like red-black binary search trees","position":{"start":{"line":58,"column":7,"offset":2312},"end":{"line":58,"column":101,"offset":2406}}}],"position":{"start":{"line":58,"column":5,"offset":2310},"end":{"line":58,"column":101,"offset":2406}}},{"type":"text","value":"\n"}],"position":{"start":{"line":57,"column":5,"offset":2280},"end":{"line":58,"column":101,"offset":2406}}},{"type":"text","value":"\n"}],"position":{"start":{"line":56,"column":1,"offset":2243},"end":{"line":58,"column":101,"offset":2406}}},{"type":"text","value":"\n"}],"position":{"start":{"line":55,"column":1,"offset":2171},"end":{"line":58,"column":101,"offset":2406}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":60,"column":1,"offset":2408},"end":{"line":60,"column":4,"offset":2411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In OCaml, we have a rich amount of stuff to work with in terms of expressions:","position":{"start":{"line":62,"column":1,"offset":2413},"end":{"line":62,"column":79,"offset":2491}}}],"position":{"start":{"line":62,"column":1,"offset":2413},"end":{"line":62,"column":79,"offset":2491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We’ve already covered these, but OCaml includes support for sum and product types, recursive types, polymorphism, type inference and pattern matching, which are hallmarks of pure functional programming languages.","position":{"start":{"line":64,"column":3,"offset":2495},"end":{"line":64,"column":215,"offset":2707}}}],"position":{"start":{"line":64,"column":1,"offset":2493},"end":{"line":64,"column":215,"offset":2707}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"However, OCaml is an imperative programming language, so it also has support for references, reads, writes, and loops","position":{"start":{"line":65,"column":3,"offset":2710},"end":{"line":65,"column":120,"offset":2827}}}],"position":{"start":{"line":65,"column":1,"offset":2708},"end":{"line":65,"column":120,"offset":2827}}},{"type":"text","value":"\n"}],"position":{"start":{"line":64,"column":1,"offset":2493},"end":{"line":65,"column":120,"offset":2827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is important to note that we still ","position":{"start":{"line":67,"column":1,"offset":2829},"end":{"line":67,"column":39,"offset":2867}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"have not","position":{"start":{"line":67,"column":41,"offset":2869},"end":{"line":67,"column":49,"offset":2877}}}],"position":{"start":{"line":67,"column":39,"offset":2867},"end":{"line":67,"column":51,"offset":2879}}},{"type":"text","value":" left the world of expressions yet (i.e. we still haven’t introduced the idea of a statement). We’re just introducing the notion of mutability into our expression-filled world.","position":{"start":{"line":67,"column":51,"offset":2879},"end":{"line":67,"column":227,"offset":3055}}}],"position":{"start":{"line":67,"column":1,"offset":2829},"end":{"line":67,"column":227,"offset":3055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How? Using new types!","position":{"start":{"line":69,"column":1,"offset":3057},"end":{"line":69,"column":22,"offset":3078}}}],"position":{"start":{"line":69,"column":1,"offset":3057},"end":{"line":69,"column":22,"offset":3078}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":71,"column":1,"offset":3080},"end":{"line":71,"column":4,"offset":3083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Reference Types","position":{"start":{"line":73,"column":5,"offset":3089},"end":{"line":73,"column":20,"offset":3104}}}],"position":{"start":{"line":73,"column":1,"offset":3085},"end":{"line":73,"column":20,"offset":3104}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In OCaml, we’ve written the following before:","position":{"start":{"line":75,"column":1,"offset":3106},"end":{"line":75,"column":46,"offset":3151}}}],"position":{"start":{"line":75,"column":1,"offset":3106},"end":{"line":75,"column":46,"offset":3151}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token keyword\">in</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":77,"column":1,"offset":3153},"end":{"line":80,"column":4,"offset":3184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, we know that in the ”…” section, x shall always remain 5, at least until it becomes shadowed.","position":{"start":{"line":82,"column":1,"offset":3186},"end":{"line":82,"column":101,"offset":3286}}}],"position":{"start":{"line":82,"column":1,"offset":3186},"end":{"line":82,"column":101,"offset":3286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, we can also write the following:","position":{"start":{"line":84,"column":1,"offset":3288},"end":{"line":84,"column":42,"offset":3329}}}],"position":{"start":{"line":84,"column":1,"offset":3288},"end":{"line":84,"column":42,"offset":3329}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> ref <span class=\"token number\">5</span> <span class=\"token keyword\">in</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":86,"column":1,"offset":3331},"end":{"line":89,"column":4,"offset":3367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This x now has the type ","position":{"start":{"line":91,"column":1,"offset":3369},"end":{"line":91,"column":25,"offset":3393}}},{"type":"raw","value":"<code class=\"language-text\">int ref</code>","position":{"start":{"line":91,"column":25,"offset":3393},"end":{"line":91,"column":34,"offset":3402}}},{"type":"text","value":" , referring to the location in memory of the 5, like pointers to the heap. Thus, the following is a type error:","position":{"start":{"line":91,"column":34,"offset":3402},"end":{"line":91,"column":146,"offset":3514}}}],"position":{"start":{"line":91,"column":1,"offset":3369},"end":{"line":91,"column":146,"offset":3514}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">x <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>","position":{"start":{"line":93,"column":1,"offset":3516},"end":{"line":95,"column":4,"offset":3534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As ","position":{"start":{"line":97,"column":1,"offset":3536},"end":{"line":97,"column":4,"offset":3539}}},{"type":"raw","value":"<code class=\"language-text\">int ref</code>","position":{"start":{"line":97,"column":4,"offset":3539},"end":{"line":97,"column":13,"offset":3548}}},{"type":"text","value":" has no support for addition (unlike in C/C++, where they very much do), this expression makes no sense! However, if we want to go from a reference to its value, we can do it through the dereference operator, ","position":{"start":{"line":97,"column":13,"offset":3548},"end":{"line":97,"column":222,"offset":3757}}},{"type":"raw","value":"<code class=\"language-text\">!</code>","position":{"start":{"line":97,"column":222,"offset":3757},"end":{"line":97,"column":225,"offset":3760}}},{"type":"text","value":" (pronounced “bang”) :","position":{"start":{"line":97,"column":225,"offset":3760},"end":{"line":97,"column":247,"offset":3782}}}],"position":{"start":{"line":97,"column":1,"offset":3536},"end":{"line":97,"column":247,"offset":3782}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token operator\">!</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>","position":{"start":{"line":99,"column":1,"offset":3784},"end":{"line":101,"column":4,"offset":3803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"which takes in x, de-references it to its value, 5, and returns that value plus one, or ","position":{"start":{"line":103,"column":1,"offset":3805},"end":{"line":103,"column":89,"offset":3893}}},{"type":"raw","value":"<code class=\"language-text\">6</code>","position":{"start":{"line":103,"column":89,"offset":3893},"end":{"line":103,"column":92,"offset":3896}}},{"type":"text","value":" ","position":{"start":{"line":103,"column":92,"offset":3896},"end":{"line":103,"column":93,"offset":3897}}}],"position":{"start":{"line":103,"column":1,"offset":3805},"end":{"line":103,"column":93,"offset":3897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This allows us to “read” from memory, like we would in C/C++. If we want to write to a reference, we need the following operator, ","position":{"start":{"line":105,"column":1,"offset":3899},"end":{"line":105,"column":131,"offset":4029}}},{"type":"raw","value":"<code class=\"language-text\">:=</code>","position":{"start":{"line":105,"column":131,"offset":4029},"end":{"line":105,"column":135,"offset":4033}}},{"type":"text","value":" , which looks like the following:","position":{"start":{"line":105,"column":135,"offset":4033},"end":{"line":105,"column":169,"offset":4067}}}],"position":{"start":{"line":105,"column":1,"offset":3899},"end":{"line":105,"column":169,"offset":4067}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">x <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>","position":{"start":{"line":107,"column":1,"offset":4069},"end":{"line":109,"column":4,"offset":4093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What ","position":{"start":{"line":111,"column":1,"offset":4095},"end":{"line":111,"column":6,"offset":4100}}},{"type":"raw","value":"<code class=\"language-text\">:=</code>","position":{"start":{"line":111,"column":6,"offset":4100},"end":{"line":111,"column":10,"offset":4104}}},{"type":"text","value":" does when its evaluated is the following:","position":{"start":{"line":111,"column":10,"offset":4104},"end":{"line":111,"column":52,"offset":4146}}}],"position":{"start":{"line":111,"column":1,"offset":4095},"end":{"line":111,"column":52,"offset":4146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Evaluate the LHS to a reference type","position":{"start":{"line":113,"column":3,"offset":4150},"end":{"line":113,"column":39,"offset":4186}}}],"position":{"start":{"line":113,"column":1,"offset":4148},"end":{"line":113,"column":39,"offset":4186}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Evaluate the RHS","position":{"start":{"line":114,"column":3,"offset":4189},"end":{"line":114,"column":19,"offset":4205}}}],"position":{"start":{"line":114,"column":1,"offset":4187},"end":{"line":114,"column":19,"offset":4205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Assigns the reference to the new value, in this case 6","position":{"start":{"line":115,"column":3,"offset":4208},"end":{"line":115,"column":57,"offset":4262}}}],"position":{"start":{"line":115,"column":1,"offset":4206},"end":{"line":115,"column":57,"offset":4262}}},{"type":"text","value":"\n"}],"position":{"start":{"line":113,"column":1,"offset":4148},"end":{"line":115,"column":57,"offset":4262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It’s important to note that these operators preserve the type of the dereferenced variable, like removing the option from an optional type. So ","position":{"start":{"line":117,"column":1,"offset":4264},"end":{"line":117,"column":144,"offset":4407}}},{"type":"raw","value":"<code class=\"language-text\">!x</code>","position":{"start":{"line":117,"column":144,"offset":4407},"end":{"line":117,"column":148,"offset":4411}}},{"type":"text","value":" has the type of ","position":{"start":{"line":117,"column":148,"offset":4411},"end":{"line":117,"column":165,"offset":4428}}},{"type":"raw","value":"<code class=\"language-text\">int</code>","position":{"start":{"line":117,"column":165,"offset":4428},"end":{"line":117,"column":170,"offset":4433}}},{"type":"text","value":" , while ","position":{"start":{"line":117,"column":170,"offset":4433},"end":{"line":117,"column":179,"offset":4442}}},{"type":"raw","value":"<code class=\"language-text\">:=</code>","position":{"start":{"line":117,"column":179,"offset":4442},"end":{"line":117,"column":183,"offset":4446}}},{"type":"text","value":" will only work if the value of ","position":{"start":{"line":117,"column":183,"offset":4446},"end":{"line":117,"column":215,"offset":4478}}},{"type":"raw","value":"<code class=\"language-text\">!x</code>","position":{"start":{"line":117,"column":215,"offset":4478},"end":{"line":117,"column":219,"offset":4482}}},{"type":"text","value":" is the same type as the RHS’s value.","position":{"start":{"line":117,"column":219,"offset":4482},"end":{"line":117,"column":256,"offset":4519}}}],"position":{"start":{"line":117,"column":1,"offset":4264},"end":{"line":117,"column":256,"offset":4519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":119,"column":1,"offset":4521},"end":{"line":119,"column":4,"offset":4524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Ordering Expressions","position":{"start":{"line":121,"column":5,"offset":4530},"end":{"line":121,"column":25,"offset":4550}}}],"position":{"start":{"line":121,"column":1,"offset":4526},"end":{"line":121,"column":25,"offset":4550}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, it might seem like these state-filled operators involve some sort of sequence. After all, the order of reads-and-writes in any computer program does matter, especially if we’re writing something non-trivial, like a parallel program. However, the whole idea of sequential execution can exist in OCaml, through the ","position":{"start":{"line":123,"column":1,"offset":4552},"end":{"line":123,"column":319,"offset":4870}}},{"type":"raw","value":"<code class=\"language-text\">;</code>","position":{"start":{"line":123,"column":319,"offset":4870},"end":{"line":123,"column":322,"offset":4873}}},{"type":"text","value":" operator. This operator serves as a shorthand. If we have the following:","position":{"start":{"line":123,"column":322,"offset":4873},"end":{"line":123,"column":395,"offset":4946}}}],"position":{"start":{"line":123,"column":1,"offset":4552},"end":{"line":123,"column":395,"offset":4946}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> ref <span class=\"token number\">5</span> <span class=\"token keyword\">in</span>\nx <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>x <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span> </code></pre></div>","position":{"start":{"line":125,"column":1,"offset":4948},"end":{"line":130,"column":4,"offset":5011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is simply shorthand for the following:","position":{"start":{"line":132,"column":1,"offset":5013},"end":{"line":132,"column":44,"offset":5056}}}],"position":{"start":{"line":132,"column":1,"offset":5013},"end":{"line":132,"column":44,"offset":5056}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> ref <span class=\"token number\">5</span> <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">_</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> \n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">_</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>x <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n      <span class=\"token operator\">!</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span> </code></pre></div>","position":{"start":{"line":134,"column":1,"offset":5058},"end":{"line":139,"column":4,"offset":5158}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"where the let expressions essentially say that we don’t care about the value of the ","position":{"start":{"line":141,"column":1,"offset":5160},"end":{"line":141,"column":85,"offset":5244}}},{"type":"raw","value":"<code class=\"language-text\">:=</code>","position":{"start":{"line":141,"column":85,"offset":5244},"end":{"line":141,"column":89,"offset":5248}}},{"type":"text","value":" operator, as its of type Unit, but we do care about the ","position":{"start":{"line":141,"column":89,"offset":5248},"end":{"line":141,"column":146,"offset":5305}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"side-effects","position":{"start":{"line":141,"column":147,"offset":5306},"end":{"line":141,"column":159,"offset":5318}}}],"position":{"start":{"line":141,"column":146,"offset":5305},"end":{"line":141,"column":160,"offset":5319}}},{"type":"text","value":" of the expressions, as they modify ","position":{"start":{"line":141,"column":160,"offset":5319},"end":{"line":141,"column":196,"offset":5355}}},{"type":"raw","value":"<code class=\"language-text\">!x</code>","position":{"start":{"line":141,"column":196,"offset":5355},"end":{"line":141,"column":200,"offset":5359}}},{"type":"text","value":" .","position":{"start":{"line":141,"column":200,"offset":5359},"end":{"line":141,"column":202,"offset":5361}}}],"position":{"start":{"line":141,"column":1,"offset":5160},"end":{"line":141,"column":202,"offset":5361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, it is important to stress here that x does not have value ","position":{"start":{"line":143,"column":1,"offset":5363},"end":{"line":143,"column":64,"offset":5426}}},{"type":"raw","value":"<code class=\"language-text\">ref 5</code>","position":{"start":{"line":143,"column":64,"offset":5426},"end":{"line":143,"column":71,"offset":5433}}},{"type":"text","value":" . ","position":{"start":{"line":143,"column":71,"offset":5433},"end":{"line":143,"column":74,"offset":5436}}},{"type":"raw","value":"<code class=\"language-text\">ref 5</code>","position":{"start":{"line":143,"column":74,"offset":5436},"end":{"line":143,"column":81,"offset":5443}}},{"type":"text","value":" is some expression that evaluates to the location in memory containing 5, and cannot be simply substituted in, as we could have before. The location is persistent, but the actual value of x does not stay ","position":{"start":{"line":143,"column":81,"offset":5443},"end":{"line":143,"column":286,"offset":5648}}},{"type":"raw","value":"<code class=\"language-text\">ref 5</code>","position":{"start":{"line":143,"column":286,"offset":5648},"end":{"line":143,"column":293,"offset":5655}}}],"position":{"start":{"line":143,"column":1,"offset":5363},"end":{"line":143,"column":293,"offset":5655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":145,"column":1,"offset":5657},"end":{"line":145,"column":4,"offset":5660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"An Example","position":{"start":{"line":147,"column":5,"offset":5666},"end":{"line":147,"column":15,"offset":5676}}}],"position":{"start":{"line":147,"column":1,"offset":5662},"end":{"line":147,"column":15,"offset":5676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we’ve covered some of the OCaml syntax for references and for iterated execution, let’s create an example to show how we can start to model some imperative semantics, even without the idea of a statement:","position":{"start":{"line":149,"column":1,"offset":5678},"end":{"line":149,"column":214,"offset":5891}}}],"position":{"start":{"line":149,"column":1,"offset":5678},"end":{"line":149,"column":214,"offset":5891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Python, we could have the following code:","position":{"start":{"line":151,"column":1,"offset":5893},"end":{"line":151,"column":45,"offset":5937}}}],"position":{"start":{"line":151,"column":1,"offset":5893},"end":{"line":151,"column":45,"offset":5937}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">incr_counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tcounter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  <span class=\"token keyword\">return</span> counter\nx1 <span class=\"token operator\">=</span> incr_counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nx2 <span class=\"token operator\">=</span> incr_counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":153,"column":1,"offset":5939},"end":{"line":160,"column":4,"offset":6065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With our expression syntax, we could have the following OCaml code:","position":{"start":{"line":162,"column":1,"offset":6067},"end":{"line":162,"column":68,"offset":6134}}}],"position":{"start":{"line":162,"column":1,"offset":6067},"end":{"line":162,"column":68,"offset":6134}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> ref <span class=\"token number\">0</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">let</span> incr<span class=\"token punctuation\">_</span>counter <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n   counter <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token operator\">!</span>counter <span class=\"token keyword\">in</span> \n<span class=\"token keyword\">let</span> x1 <span class=\"token operator\">=</span> incr<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> \n<span class=\"token keyword\">let</span> x2 <span class=\"token operator\">=</span> incr<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":164,"column":1,"offset":6136},"end":{"line":172,"column":4,"offset":6299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, yes, OCaml is really an imperative programming language, even if we hadn’t needed to do it as of yet, due to OCaml’s rich expression syntax. ","position":{"start":{"line":174,"column":1,"offset":6301},"end":{"line":174,"column":146,"offset":6446}}}],"position":{"start":{"line":174,"column":1,"offset":6301},"end":{"line":174,"column":146,"offset":6446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":176,"column":1,"offset":6448},"end":{"line":176,"column":4,"offset":6451}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Another Example, with Counters!","position":{"start":{"line":178,"column":5,"offset":6457},"end":{"line":178,"column":36,"offset":6488}}}],"position":{"start":{"line":178,"column":1,"offset":6453},"end":{"line":178,"column":36,"offset":6488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say we want to package all of this up into a module. We could have the following in OCaml:","position":{"start":{"line":180,"column":1,"offset":6490},"end":{"line":180,"column":91,"offset":6580}}}],"position":{"start":{"line":180,"column":1,"offset":6490},"end":{"line":180,"column":91,"offset":6580}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> init<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> incr<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n      counter <span class=\"token operator\">:=</span> <span class=\"token operator\">!</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">!</span>counter <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> read<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n     <span class=\"token operator\">!</span>counter <span class=\"token keyword\">in</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token module variable\">Where</span> we could <span class=\"token keyword\">then</span> use it like the following<span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">let</span> my<span class=\"token punctuation\">_</span>counter <span class=\"token operator\">=</span> init<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> \n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  my<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">.</span>incr<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  my<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">_</span>counter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":182,"column":1,"offset":6582},"end":{"line":197,"column":4,"offset":6917}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This would translate, more or less, into the following Python class:","position":{"start":{"line":199,"column":1,"offset":6919},"end":{"line":199,"column":69,"offset":6987}}}],"position":{"start":{"line":199,"column":1,"offset":6919},"end":{"line":199,"column":69,"offset":6987}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">incr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>count\n  <span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>count</code></pre></div>","position":{"start":{"line":201,"column":1,"offset":6989},"end":{"line":210,"column":4,"offset":7158}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As we can see, OOP really involves the following collection of functions:","position":{"start":{"line":212,"column":1,"offset":7160},"end":{"line":212,"column":74,"offset":7233}}}],"position":{"start":{"line":212,"column":1,"offset":7160},"end":{"line":212,"column":74,"offset":7233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Functions that create state","position":{"start":{"line":214,"column":3,"offset":7237},"end":{"line":214,"column":30,"offset":7264}}}],"position":{"start":{"line":214,"column":1,"offset":7235},"end":{"line":214,"column":30,"offset":7264}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Functions that interact with the state","position":{"start":{"line":215,"column":3,"offset":7267},"end":{"line":215,"column":41,"offset":7305}}}],"position":{"start":{"line":215,"column":1,"offset":7265},"end":{"line":215,"column":41,"offset":7305}}},{"type":"text","value":"\n"}],"position":{"start":{"line":214,"column":1,"offset":7235},"end":{"line":215,"column":41,"offset":7305}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"with a lot of fancy syntax ","position":{"start":{"line":217,"column":1,"offset":7307},"end":{"line":217,"column":28,"offset":7334}}}],"position":{"start":{"line":217,"column":1,"offset":7307},"end":{"line":217,"column":28,"offset":7334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":219,"column":1,"offset":7336},"end":{"line":219,"column":4,"offset":7339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Memory, or what’s actually happening when you use reference types","position":{"start":{"line":221,"column":5,"offset":7345},"end":{"line":221,"column":70,"offset":7410}}}],"position":{"start":{"line":221,"column":1,"offset":7341},"end":{"line":221,"column":70,"offset":7410}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, now that we’ve covered some of the uses that simply adding memory does for us, let’s look under the hood a tiny bit. If we had the following code:","position":{"start":{"line":223,"column":1,"offset":7412},"end":{"line":223,"column":151,"offset":7562}}}],"position":{"start":{"line":223,"column":1,"offset":7412},"end":{"line":223,"column":151,"offset":7562}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> ref <span class=\"token number\">6</span> <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> ref <span class=\"token number\">6</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n      <span class=\"token keyword\">let</span> ys <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":225,"column":1,"offset":7564},"end":{"line":231,"column":4,"offset":7667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can picture each ","position":{"start":{"line":233,"column":1,"offset":7669},"end":{"line":233,"column":21,"offset":7689}}},{"type":"raw","value":"<code class=\"language-text\">ref</code>","position":{"start":{"line":233,"column":21,"offset":7689},"end":{"line":233,"column":26,"offset":7694}}},{"type":"text","value":" statement as allocating memory. So when we evaluate the following:","position":{"start":{"line":233,"column":26,"offset":7694},"end":{"line":233,"column":93,"offset":7761}}}],"position":{"start":{"line":233,"column":1,"offset":7669},"end":{"line":233,"column":93,"offset":7761}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">let x <span class=\"token operator\">=</span> ref <span class=\"token number\">6</span> <span class=\"token keyword\">in</span></code></pre></div>","position":{"start":{"line":235,"column":1,"offset":7763},"end":{"line":237,"column":4,"offset":7793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ref 6</code>","position":{"start":{"line":239,"column":1,"offset":7795},"end":{"line":239,"column":8,"offset":7802}}},{"type":"text","value":" will evaluate to a location in memory, l1, that has 6 in it. Then, when we evaluate:","position":{"start":{"line":239,"column":8,"offset":7802},"end":{"line":239,"column":93,"offset":7887}}}],"position":{"start":{"line":239,"column":1,"offset":7795},"end":{"line":239,"column":93,"offset":7887}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> reg <span class=\"token number\">6</span> <span class=\"token keyword\">in</span></code></pre></div>","position":{"start":{"line":241,"column":1,"offset":7889},"end":{"line":243,"column":4,"offset":7918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"the next ","position":{"start":{"line":245,"column":1,"offset":7920},"end":{"line":245,"column":10,"offset":7929}}},{"type":"raw","value":"<code class=\"language-text\">ref 6</code>","position":{"start":{"line":245,"column":10,"offset":7929},"end":{"line":245,"column":17,"offset":7936}}},{"type":"text","value":" will create another new location in memory, l2, that also has six in it, after which it will assign that location to y. However, when we evaluate:","position":{"start":{"line":245,"column":17,"offset":7936},"end":{"line":245,"column":164,"offset":8083}}}],"position":{"start":{"line":245,"column":1,"offset":7920},"end":{"line":245,"column":164,"offset":8083}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> xs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">;</span><span class=\"token operator\">!</span>y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span></code></pre></div>","position":{"start":{"line":247,"column":1,"offset":8085},"end":{"line":249,"column":4,"offset":8117}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There is no ","position":{"start":{"line":251,"column":1,"offset":8119},"end":{"line":251,"column":13,"offset":8131}}},{"type":"raw","value":"<code class=\"language-text\">ref</code>","position":{"start":{"line":251,"column":13,"offset":8131},"end":{"line":251,"column":18,"offset":8136}}},{"type":"text","value":" expression, so nothing in memory is changed and xs simply refers to ","position":{"start":{"line":251,"column":18,"offset":8136},"end":{"line":251,"column":87,"offset":8205}}},{"type":"raw","value":"<code class=\"language-text\">[6,6]</code>","position":{"start":{"line":251,"column":87,"offset":8205},"end":{"line":251,"column":94,"offset":8212}}},{"type":"text","value":" , and no new memory location is created, with xs having type ","position":{"start":{"line":251,"column":94,"offset":8212},"end":{"line":251,"column":156,"offset":8274}}},{"type":"raw","value":"<code class=\"language-text\">int list</code>","position":{"start":{"line":251,"column":156,"offset":8274},"end":{"line":251,"column":166,"offset":8284}}},{"type":"text","value":" Lastly, when we evaluate:","position":{"start":{"line":251,"column":166,"offset":8284},"end":{"line":251,"column":192,"offset":8310}}}],"position":{"start":{"line":251,"column":1,"offset":8119},"end":{"line":251,"column":192,"offset":8310}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> ys <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">;</span>y<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span></code></pre></div>","position":{"start":{"line":253,"column":1,"offset":8312},"end":{"line":255,"column":4,"offset":8345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We have a new ref expression, so we allocate a new location in memory, l3, which currently has the value of ","position":{"start":{"line":257,"column":1,"offset":8347},"end":{"line":257,"column":109,"offset":8455}}},{"type":"text","value":"[l1,l2]","position":{"start":{"line":257,"column":110,"offset":8456},"end":{"line":257,"column":115,"offset":8461}}},{"type":"text","value":" in it, as it stores the locations where each of our 6s are, where ys has type ","position":{"start":{"line":257,"column":116,"offset":8462},"end":{"line":257,"column":195,"offset":8541}}},{"type":"raw","value":"<code class=\"language-text\">int ref list ref</code>","position":{"start":{"line":257,"column":195,"offset":8541},"end":{"line":257,"column":213,"offset":8559}}},{"type":"text","value":" , referring to l3.","position":{"start":{"line":257,"column":213,"offset":8559},"end":{"line":257,"column":232,"offset":8578}}}],"position":{"start":{"line":257,"column":1,"offset":8347},"end":{"line":257,"column":232,"offset":8578}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In terms of deallocation, we don’t do this explicitly. Instead, OCaml has a so-called “garbage” collecter, a system which removes unused memory once there are no references to it used anymore. This is a common tactic in non-C languages, and later, in Rust, we’ll learn more about another way to approach this need to specify deallocation.","position":{"start":{"line":259,"column":1,"offset":8580},"end":{"line":259,"column":339,"offset":8918}}}],"position":{"start":{"line":259,"column":1,"offset":8580},"end":{"line":259,"column":339,"offset":8918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":261,"column":1,"offset":8920},"end":{"line":261,"column":4,"offset":8923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Formalism","position":{"start":{"line":263,"column":4,"offset":8928},"end":{"line":263,"column":13,"offset":8937}}}],"position":{"start":{"line":263,"column":1,"offset":8925},"end":{"line":263,"column":13,"offset":8937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we’ve covered the idea of references in some length, let’s cover the formal rules behind them and see if we can add to ALFA this idea that pervades a lot of CS","position":{"start":{"line":265,"column":1,"offset":8939},"end":{"line":265,"column":169,"offset":9107}}}],"position":{"start":{"line":265,"column":1,"offset":8939},"end":{"line":265,"column":169,"offset":9107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To do so, we’ll create a new language called “ALFA Mut” which builds on ALFA, but has references!","position":{"start":{"line":267,"column":1,"offset":9109},"end":{"line":267,"column":98,"offset":9206}}}],"position":{"start":{"line":267,"column":1,"offset":9109},"end":{"line":267,"column":98,"offset":9206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":269,"column":1,"offset":9208},"end":{"line":269,"column":4,"offset":9211}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"New Types and Expression Forms","position":{"start":{"line":271,"column":5,"offset":9217},"end":{"line":271,"column":35,"offset":9247}}}],"position":{"start":{"line":271,"column":1,"offset":9213},"end":{"line":271,"column":35,"offset":9247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In terms of types, we’ll add a new type called  a reference type:","position":{"start":{"line":273,"column":1,"offset":9249},"end":{"line":273,"column":66,"offset":9314}}}],"position":{"start":{"line":273,"column":1,"offset":9249},"end":{"line":273,"column":66,"offset":9314}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">tau <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token operator\">|</span> <span class=\"token module variable\">Ref</span><span class=\"token punctuation\">(</span>tau<span class=\"token punctuation\">)</span>             tau ref</code></pre></div>","position":{"start":{"line":275,"column":1,"offset":9316},"end":{"line":278,"column":4,"offset":9374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"where, keeping with OCaml, we’ll write “ref” after the type if that type is a reference type for the concrete syntax.","position":{"start":{"line":280,"column":1,"offset":9376},"end":{"line":280,"column":118,"offset":9493}}}],"position":{"start":{"line":280,"column":1,"offset":9376},"end":{"line":280,"column":118,"offset":9493}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ll also create the following operators for the expression language:","position":{"start":{"line":282,"column":1,"offset":9495},"end":{"line":282,"column":71,"offset":9565}}}],"position":{"start":{"line":282,"column":1,"offset":9495},"end":{"line":282,"column":71,"offset":9565}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">e <span class=\"token punctuation\">:</span><span class=\"token operator\">:=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token operator\">|</span> <span class=\"token module variable\">Alloc</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>     alloc<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">(</span>refers <span class=\"token keyword\">to</span> ref<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token module variable\">OCaml</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span> <span class=\"token module variable\">Deref</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>    <span class=\"token operator\">!</span>e              <span class=\"token punctuation\">(</span>like <span class=\"token operator\">*</span>e <span class=\"token keyword\">in</span> C<span class=\"token punctuation\">,</span> <span class=\"token operator\">and</span> looks up the location <span class=\"token keyword\">in</span> memory\n  <span class=\"token operator\">|</span> <span class=\"token module variable\">Assign</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> e1 <span class=\"token operator\">:=</span> e2       \n  <span class=\"token operator\">|</span> <span class=\"token module variable\">Loc</span><span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">]</span>         <span class=\"token punctuation\">(</span><span class=\"token module variable\">No</span> concrete syntax<span class=\"token punctuation\">,</span> but serves <span class=\"token keyword\">as</span> a way\n                    <span class=\"token keyword\">for</span> us <span class=\"token keyword\">to</span> distinguish reference types<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":284,"column":1,"offset":9567},"end":{"line":291,"column":4,"offset":9884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, let’s move onto the typing rules for this language.","position":{"start":{"line":293,"column":1,"offset":9886},"end":{"line":293,"column":57,"offset":9942}}}],"position":{"start":{"line":293,"column":1,"offset":9886},"end":{"line":293,"column":57,"offset":9942}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":295,"column":1,"offset":9944},"end":{"line":295,"column":4,"offset":9947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"New Typing Rules","position":{"start":{"line":297,"column":5,"offset":9953},"end":{"line":297,"column":21,"offset":9969}}}],"position":{"start":{"line":297,"column":1,"offset":9949},"end":{"line":297,"column":21,"offset":9969}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For alloc:","position":{"start":{"line":299,"column":1,"offset":9971},"end":{"line":299,"column":11,"offset":9981}}}],"position":{"start":{"line":299,"column":1,"offset":9971},"end":{"line":299,"column":11,"offset":9981}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>e</mi><mo>:</mo><mi>τ</mi></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mtext>alloc(e)</mtext><mo>:</mo><mi>τ</mi><mtext>ref</mtext></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\Gamma \\vdash e : \\tau}{\\Gamma \\vdash \\text{alloc(e)} : \\tau \\text{ref}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.30744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">alloc(e)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord text\"><span class=\"mord\">ref</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":301,"column":1,"offset":9983},"end":{"line":301,"column":83,"offset":10065}}}],"position":{"start":{"line":301,"column":1,"offset":9983},"end":{"line":301,"column":83,"offset":10065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which makes sense, as alloc introduces references.","position":{"start":{"line":303,"column":1,"offset":10067},"end":{"line":303,"column":51,"offset":10117}}}],"position":{"start":{"line":303,"column":1,"offset":10067},"end":{"line":303,"column":51,"offset":10117}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For deref:","position":{"start":{"line":305,"column":1,"offset":10119},"end":{"line":305,"column":11,"offset":10129}}}],"position":{"start":{"line":305,"column":1,"offset":10119},"end":{"line":305,"column":11,"offset":10129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>e</mi><mo>:</mo><mi>τ</mi><mtext> ref</mtext></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mtext>deref(e)</mtext><mo>:</mo><mi>τ</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\Gamma \\vdash e : \\tau \\text{ ref}}{\\Gamma \\vdash \\text{deref(e)} : \\tau}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.30744em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">deref(e)</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord text\"><span class=\"mord\"> ref</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":307,"column":1,"offset":10131},"end":{"line":307,"column":84,"offset":10214}}}],"position":{"start":{"line":307,"column":1,"offset":10131},"end":{"line":307,"column":84,"offset":10214}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which also makes sense, as deref should eliminate a reference type for a value type.","position":{"start":{"line":309,"column":1,"offset":10216},"end":{"line":309,"column":85,"offset":10300}}}],"position":{"start":{"line":309,"column":1,"offset":10216},"end":{"line":309,"column":85,"offset":10300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lastly, for assignment: ","position":{"start":{"line":311,"column":1,"offset":10302},"end":{"line":311,"column":25,"offset":10326}}}],"position":{"start":{"line":311,"column":1,"offset":10302},"end":{"line":311,"column":25,"offset":10326}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><msub><mi>e</mi><mn>1</mn></msub><mo>:</mo><mi>τ</mi><mtext> ref , </mtext><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><msub><mi>e</mi><mn>2</mn></msub><mo>:</mo><mi>τ</mi></mrow><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><msub><mi>e</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msub><mi>e</mi><mn>2</mn></msub><mo>:</mo><mtext>Unit</mtext></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\Gamma \\vdash e_1 : \\tau \\text{ ref ,   } \\Gamma \\vdash e_2 : \\tau }{\\Gamma \\vdash e_1 := e_2 : \\text{Unit}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.20744em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">Unit</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mord text\"><span class=\"mord\"> ref , </span></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.1132em;\">τ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":313,"column":1,"offset":10328},"end":{"line":313,"column":119,"offset":10446}}}],"position":{"start":{"line":313,"column":1,"offset":10328},"end":{"line":313,"column":119,"offset":10446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Which makes sense, as we’re focused on the side-effects of this operation, so it shouldn’t return anything meaningful in any meaningful type.","position":{"start":{"line":315,"column":1,"offset":10448},"end":{"line":315,"column":142,"offset":10589}}}],"position":{"start":{"line":315,"column":1,"offset":10448},"end":{"line":315,"column":142,"offset":10589}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With these done, let’s finish off with the evaluation semantics.","position":{"start":{"line":317,"column":1,"offset":10591},"end":{"line":317,"column":65,"offset":10655}}}],"position":{"start":{"line":317,"column":1,"offset":10591},"end":{"line":317,"column":65,"offset":10655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":319,"column":1,"offset":10657},"end":{"line":319,"column":4,"offset":10660}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Dynamic Semantics","position":{"start":{"line":321,"column":5,"offset":10666},"end":{"line":321,"column":22,"offset":10683}}}],"position":{"start":{"line":321,"column":1,"offset":10662},"end":{"line":321,"column":22,"offset":10683}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, at first, it seems like we should be able to have the evaluation judgement:","position":{"start":{"line":323,"column":1,"offset":10685},"end":{"line":323,"column":80,"offset":10764}}}],"position":{"start":{"line":323,"column":1,"offset":10685},"end":{"line":323,"column":80,"offset":10764}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>⇓</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e \\Downarrow e&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.801892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span>","position":{"start":{"line":325,"column":1,"offset":10766},"end":{"line":325,"column":20,"offset":10785}}}],"position":{"start":{"line":325,"column":1,"offset":10766},"end":{"line":325,"column":20,"offset":10785}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After all, that’s worked for all of the previous incarnations of ALFA. However, if we think about it, our functions are not pure anymore, as they change memory. Thus, we really need the following new evaluation judgment:","position":{"start":{"line":327,"column":1,"offset":10787},"end":{"line":327,"column":221,"offset":11007}}}],"position":{"start":{"line":327,"column":1,"offset":10787},"end":{"line":327,"column":221,"offset":11007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>μ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">e || \\mu \\Downarrow e&#x27;||\\mu &#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span>","position":{"start":{"line":329,"column":1,"offset":11009},"end":{"line":329,"column":34,"offset":11042}}}],"position":{"start":{"line":329,"column":1,"offset":11009},"end":{"line":329,"column":34,"offset":11042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Where the e||mu is known as a state, and mu refers to a mapping of locations l to values e of the form l1 → e1, …, ln → en, assuming that all memory locations are distinct and reorderable. ","position":{"start":{"line":331,"column":1,"offset":11044},"end":{"line":331,"column":193,"offset":11236}}}],"position":{"start":{"line":331,"column":1,"offset":11044},"end":{"line":331,"column":193,"offset":11236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With this in hand, we then can have the following judgements for the evaluation of ALFA Mut:","position":{"start":{"line":333,"column":1,"offset":11238},"end":{"line":333,"column":93,"offset":11330}}}],"position":{"start":{"line":333,"column":1,"offset":11238},"end":{"line":333,"column":93,"offset":11330}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For alloc:","position":{"start":{"line":335,"column":1,"offset":11332},"end":{"line":335,"column":11,"offset":11342}}}],"position":{"start":{"line":335,"column":1,"offset":11332},"end":{"line":335,"column":11,"offset":11342}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>e</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>0</mn></msub><mo>⇓</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>l</mi><mtext> fresh </mtext><mo stretchy=\"false\">)</mo></mrow><mrow><mi>a</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>c</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>0</mn></msub><mo>⇓</mo><mtext>Loc[l]</mtext><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>l</mi><mo>→</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e||\\mu_0 \\Downarrow e&#x27; || \\mu_1 , (l \\text{ fresh }) }{alloc(e)||\\mu_0 \\Downarrow \\text{Loc[l]}||\\mu_1, l\\rightarrow e&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.364892em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">c</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">e</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">Loc[l]</span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6778919999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord text\"><span class=\"mord\"> fresh </span></span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":337,"column":1,"offset":11344},"end":{"line":337,"column":131,"offset":11474}}}],"position":{"start":{"line":337,"column":1,"offset":11344},"end":{"line":337,"column":131,"offset":11474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, we’re essentially saying that, given that ","position":{"start":{"line":339,"column":1,"offset":11476},"end":{"line":339,"column":49,"offset":11524}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"e","position":{"start":{"line":339,"column":50,"offset":11525},"end":{"line":339,"column":51,"offset":11526}}}],"position":{"start":{"line":339,"column":49,"offset":11524},"end":{"line":339,"column":52,"offset":11527}}},{"type":"text","value":" evaluates to ","position":{"start":{"line":339,"column":52,"offset":11527},"end":{"line":339,"column":66,"offset":11541}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"e’,","position":{"start":{"line":339,"column":67,"offset":11542},"end":{"line":339,"column":70,"offset":11545}}}],"position":{"start":{"line":339,"column":66,"offset":11541},"end":{"line":339,"column":71,"offset":11546}}},{"type":"text","value":" and that the rest of the program changes the state from mu0 to mu1, and that L is a fresh location in memory, allocating e evaluates to the value ","position":{"start":{"line":339,"column":71,"offset":11546},"end":{"line":339,"column":218,"offset":11693}}},{"type":"raw","value":"<code class=\"language-text\">Loc[l]</code>","position":{"start":{"line":339,"column":218,"offset":11693},"end":{"line":339,"column":226,"offset":11701}}},{"type":"text","value":" , where ","position":{"start":{"line":339,"column":226,"offset":11701},"end":{"line":339,"column":235,"offset":11710}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"L","position":{"start":{"line":339,"column":236,"offset":11711},"end":{"line":339,"column":237,"offset":11712}}}],"position":{"start":{"line":339,"column":235,"offset":11710},"end":{"line":339,"column":238,"offset":11713}}},{"type":"text","value":" refers to the evaluated expression, e’. ","position":{"start":{"line":339,"column":238,"offset":11713},"end":{"line":339,"column":279,"offset":11754}}}],"position":{"start":{"line":339,"column":1,"offset":11476},"end":{"line":339,"column":279,"offset":11754}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For deref:","position":{"start":{"line":341,"column":1,"offset":11756},"end":{"line":341,"column":11,"offset":11766}}}],"position":{"start":{"line":341,"column":1,"offset":11756},"end":{"line":341,"column":11,"offset":11766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>e</mi><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><mtext>Loc[l]</mtext><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>μ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">,</mo><msup><mi>μ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><mrow><mtext>deref(e)</mtext><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><mi>μ</mi><mo>⇓</mo><msup><mi>e</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msup><mi>μ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e||\\mu \\Downarrow \\text{Loc[l]}||\\mu&#x27;, \\mu&#x27;[l]=e&#x27;}{\\text{deref(e)}||\\mu\\Downarrow e&#x27;||\\mu&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.364892em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">deref(e)</span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6778919999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6778919999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">μ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">Loc[l]</span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":343,"column":1,"offset":11768},"end":{"line":343,"column":102,"offset":11869}}}],"position":{"start":{"line":343,"column":1,"offset":11768},"end":{"line":343,"column":102,"offset":11869}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, we’re essentially saying that, if the inner expression evaluates to a location, and if that location holds value e’, then the value of deref(e) is simply that value.","position":{"start":{"line":345,"column":1,"offset":11871},"end":{"line":345,"column":172,"offset":12042}}}],"position":{"start":{"line":345,"column":1,"offset":11871},"end":{"line":345,"column":172,"offset":12042}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For state assignment:","position":{"start":{"line":347,"column":1,"offset":12044},"end":{"line":347,"column":22,"offset":12065}}}],"position":{"start":{"line":347,"column":1,"offset":12044},"end":{"line":347,"column":22,"offset":12065}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msub><mi>e</mi><mn>1</mn></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>1</mn></msub><mo>⇓</mo><mtext>Loc[l]</mtext><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>μ</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><msub><mi>e</mi><mn>2</mn></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msubsup><mi>μ</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo>⇓</mo><msubsup><mi>e</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>l</mi><mo>→</mo><msub><mi>e</mi><mn>3</mn></msub></mrow><mrow><msub><mi>e</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msub><mi>e</mi><mn>2</mn></msub><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>1</mn></msub><mo>⇓</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">∣</mi><msub><mi>μ</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>l</mi><mo>→</mo><msubsup><mi>e</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{e_1||\\mu_1\\Downarrow \\text{Loc[l]}||\\mu_1&#x27;,e_2||\\mu_1&#x27; \\Downarrow e_2&#x27;||\\mu_2, l\\rightarrow e_3}{e_1:=e_2 || \\mu_1 \\Downarrow () || \\mu_2 , l \\rightarrow e_2&#x27;}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.3811999999999998em;vertical-align:-0.9523079999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.428892em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.733692em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.0448000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.26630799999999993em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord text\"><span class=\"mord\">Loc[l]</span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇓</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathdefault\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9523079999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>","position":{"start":{"line":349,"column":1,"offset":12067},"end":{"line":349,"column":170,"offset":12236}}}],"position":{"start":{"line":349,"column":1,"offset":12067},"end":{"line":349,"column":170,"offset":12236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here, we’re saying that the memory write operator evaluates to Unit, and the memory cell e1 refers to becomes the value of e2, given that e1 is a reference, e2 is a value that changes some memory potentially, and l contains some value (i.e. it’s been allocated at some point).","position":{"start":{"line":351,"column":1,"offset":12238},"end":{"line":351,"column":277,"offset":12514}}}],"position":{"start":{"line":351,"column":1,"offset":12238},"end":{"line":351,"column":277,"offset":12514}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’re evaluating these expressions from left to right, where the change of the state of reference e1 happens ","position":{"start":{"line":353,"column":1,"offset":12516},"end":{"line":353,"column":110,"offset":12625}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"last,","position":{"start":{"line":353,"column":112,"offset":12627},"end":{"line":353,"column":117,"offset":12632}}}],"position":{"start":{"line":353,"column":110,"offset":12625},"end":{"line":353,"column":119,"offset":12634}}},{"type":"text","value":" after you change memory states from evaluating e1 and then e2. I can picture Cyrus putting an exam question about this somewhere, so just wanted to draw attention to it. ","position":{"start":{"line":353,"column":119,"offset":12634},"end":{"line":353,"column":290,"offset":12805}}}],"position":{"start":{"line":353,"column":1,"offset":12516},"end":{"line":353,"column":290,"offset":12805}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":355,"column":1,"offset":12807},"end":{"line":355,"column":4,"offset":12810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And thus, this lecture is done. On the next lecture, we’ll probably get into more imperative constructs and turn our little pure functional language into a full on imperative one.","position":{"start":{"line":357,"column":1,"offset":12812},"end":{"line":357,"column":180,"offset":12991}}}],"position":{"start":{"line":357,"column":1,"offset":12812},"end":{"line":357,"column":180,"offset":12991}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":357,"column":180,"offset":12991}}}}