{"expireTime":9007200846508351000,"key":"transformer-remark-markdown-ast-2cc1a6a44995b96369485368d750825a-gatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Last Time: We started to talk about Rust. As a recap:","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":54,"offset":54},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":54,"offset":54},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Rust is an imperative language, so it has reference semantics with side effects on memory that we need to worry about.","position":{"start":{"line":4,"column":3,"offset":58},"end":{"line":4,"column":121,"offset":176},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":58},"end":{"line":4,"column":121,"offset":176},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":56},"end":{"line":4,"column":121,"offset":176},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Rust also has automatic memory management, where programmers did not need to have any explicit free for every memory allocation, which leads to memory safety.","position":{"start":{"line":5,"column":3,"offset":179},"end":{"line":5,"column":161,"offset":337},"indent":[]}}],"position":{"start":{"line":5,"column":3,"offset":179},"end":{"line":5,"column":161,"offset":337},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":177},"end":{"line":5,"column":161,"offset":337},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"However, Rust manages to have this automatic memory management system in it’s static semantics rather than its dynamics semantics,  removing the need for a garbage collector and moving memory management into compile-time, making it speedy and correct!","position":{"start":{"line":6,"column":3,"offset":340},"end":{"line":6,"column":254,"offset":591},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":340},"end":{"line":6,"column":254,"offset":591},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":338},"end":{"line":6,"column":254,"offset":591},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":56},"end":{"line":6,"column":254,"offset":591},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"How? Rust manages to do this via the concept of ownership:","position":{"start":{"line":8,"column":1,"offset":593},"end":{"line":8,"column":59,"offset":651},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":593},"end":{"line":8,"column":59,"offset":651},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The idea here is that every heap-allocated resource has an owner. So, if we had written ","position":{"start":{"line":10,"column":3,"offset":655},"end":{"line":10,"column":91,"offset":743},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let x=String::from(&quot;hello&quot;)</code>","position":{"start":{"line":10,"column":91,"offset":743},"end":{"line":10,"column":120,"offset":772},"indent":[]}},{"type":"text","value":" , we say that ","position":{"start":{"line":10,"column":120,"offset":772},"end":{"line":10,"column":135,"offset":787},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":10,"column":135,"offset":787},"end":{"line":10,"column":138,"offset":790},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":10,"column":138,"offset":790},"end":{"line":10,"column":139,"offset":791},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"owns","position":{"start":{"line":10,"column":141,"offset":793},"end":{"line":10,"column":145,"offset":797},"indent":[]}}],"position":{"start":{"line":10,"column":139,"offset":791},"end":{"line":10,"column":147,"offset":799},"indent":[]}},{"type":"text","value":" the resource in the heap that contains ","position":{"start":{"line":10,"column":147,"offset":799},"end":{"line":10,"column":187,"offset":839},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hello</code>","position":{"start":{"line":10,"column":187,"offset":839},"end":{"line":10,"column":194,"offset":846},"indent":[]}},{"type":"text","value":", and whatever else is needed to implement it.","position":{"start":{"line":10,"column":194,"offset":846},"end":{"line":10,"column":240,"offset":892},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":655},"end":{"line":10,"column":240,"offset":892},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":653},"end":{"line":10,"column":240,"offset":892},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Then, when the owner dies ( which Rust defines as when “its lifetime ends” ), Rust will add a statement to deallocate the memory at ","position":{"start":{"line":11,"column":3,"offset":895},"end":{"line":11,"column":135,"offset":1027},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"compile time.","position":{"start":{"line":11,"column":136,"offset":1028},"end":{"line":11,"column":149,"offset":1041},"indent":[]}}],"position":{"start":{"line":11,"column":135,"offset":1027},"end":{"line":11,"column":150,"offset":1042},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":895},"end":{"line":11,"column":150,"offset":1042},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":893},"end":{"line":11,"column":150,"offset":1042},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"What makes this even more useful, however, is that Rust also checks for ownership semantics at compile time, so if a resource is deallocated, Rust will inform the user of that ","position":{"start":{"line":12,"column":3,"offset":1045},"end":{"line":12,"column":179,"offset":1221},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"before the program is even run","position":{"start":{"line":12,"column":181,"offset":1223},"end":{"line":12,"column":211,"offset":1253},"indent":[]}}],"position":{"start":{"line":12,"column":179,"offset":1221},"end":{"line":12,"column":213,"offset":1255},"indent":[]}},{"type":"text","value":". This allows programmers to reason about memory management errors without needing to run ","position":{"start":{"line":12,"column":213,"offset":1255},"end":{"line":12,"column":303,"offset":1345},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">valgrind</code>","position":{"start":{"line":12,"column":303,"offset":1345},"end":{"line":12,"column":313,"offset":1355},"indent":[]}},{"type":"text","value":" or having to use a garbage collector.","position":{"start":{"line":12,"column":313,"offset":1355},"end":{"line":12,"column":351,"offset":1393},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":1045},"end":{"line":12,"column":351,"offset":1393},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1043},"end":{"line":12,"column":351,"offset":1393},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":653},"end":{"line":12,"column":351,"offset":1393},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now, with all of this power and this speed, we have to fundamentally change our understanding of memory to use it, as memory objects in Rust can ","position":{"start":{"line":14,"column":1,"offset":1395},"end":{"line":14,"column":146,"offset":1540},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"change owners","position":{"start":{"line":14,"column":147,"offset":1541},"end":{"line":14,"column":160,"offset":1554},"indent":[]}}],"position":{"start":{"line":14,"column":146,"offset":1540},"end":{"line":14,"column":161,"offset":1555},"indent":[]}},{"type":"text","value":". What I mean is the following:","position":{"start":{"line":14,"column":161,"offset":1555},"end":{"line":14,"column":192,"offset":1586},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1395},"end":{"line":14,"column":192,"offset":1586},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When you write a statement like ","position":{"start":{"line":16,"column":3,"offset":1590},"end":{"line":16,"column":35,"offset":1622},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let y = x</code>","position":{"start":{"line":16,"column":35,"offset":1622},"end":{"line":16,"column":46,"offset":1633},"indent":[]}},{"type":"text","value":" in many languages, this can actually do a number of things, depending on the language and its semantics. In C++, for example, y would have a copy of the value of x, and, in JavaScript, a language with many quirks, if x was an object then y would be a “shallow copy” of x, simply copying all of the values for the object, making all heap references refer to the exact pieces of memory as x. In Rust, unsurprisingly, assignment has an additional semantic to it: ","position":{"start":{"line":16,"column":46,"offset":1633},"end":{"line":16,"column":507,"offset":2094},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"assignment moves ownership","position":{"start":{"line":16,"column":509,"offset":2096},"end":{"line":16,"column":535,"offset":2122},"indent":[]}}],"position":{"start":{"line":16,"column":507,"offset":2094},"end":{"line":16,"column":537,"offset":2124},"indent":[]}},{"type":"text","value":". So, in this case, ","position":{"start":{"line":16,"column":537,"offset":2124},"end":{"line":16,"column":557,"offset":2144},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">y</code>","position":{"start":{"line":16,"column":557,"offset":2144},"end":{"line":16,"column":560,"offset":2147},"indent":[]}},{"type":"text","value":" would own the String ","position":{"start":{"line":16,"column":560,"offset":2147},"end":{"line":16,"column":582,"offset":2169},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hello</code>","position":{"start":{"line":16,"column":582,"offset":2169},"end":{"line":16,"column":589,"offset":2176},"indent":[]}},{"type":"text","value":", and trying to get the value ","position":{"start":{"line":16,"column":589,"offset":2176},"end":{"line":16,"column":619,"offset":2206},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hello</code>","position":{"start":{"line":16,"column":619,"offset":2206},"end":{"line":16,"column":626,"offset":2213},"indent":[]}},{"type":"text","value":" from x, say by calling ","position":{"start":{"line":16,"column":626,"offset":2213},"end":{"line":16,"column":650,"offset":2237},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">println!(&quot;{}!&quot;, x)</code>","position":{"start":{"line":16,"column":650,"offset":2237},"end":{"line":16,"column":670,"offset":2257},"indent":[]}},{"type":"text","value":" , would lead to a compiler error, as x does not own any heap allocated data at this point.","position":{"start":{"line":16,"column":670,"offset":2257},"end":{"line":16,"column":761,"offset":2348},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1590},"end":{"line":16,"column":761,"offset":2348},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1588},"end":{"line":16,"column":761,"offset":2348},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Another case where Rust changes ownership is in function calls. If we write a function, say ","position":{"start":{"line":17,"column":3,"offset":2351},"end":{"line":17,"column":95,"offset":2443},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lol(x)</code>","position":{"start":{"line":17,"column":95,"offset":2443},"end":{"line":17,"column":103,"offset":2451},"indent":[]}},{"type":"text","value":" , passing in ","position":{"start":{"line":17,"column":103,"offset":2451},"end":{"line":17,"column":117,"offset":2465},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":17,"column":117,"offset":2465},"end":{"line":17,"column":120,"offset":2468},"indent":[]}},{"type":"text","value":" directly moves ownership of ","position":{"start":{"line":17,"column":120,"offset":2468},"end":{"line":17,"column":149,"offset":2497},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x</code>","position":{"start":{"line":17,"column":149,"offset":2497},"end":{"line":17,"column":152,"offset":2500},"indent":[]}},{"type":"text","value":" into the calling function. Does, if we were to put the following code: ","position":{"start":{"line":17,"column":152,"offset":2500},"end":{"line":17,"column":224,"offset":2572},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let x = String::from(&quot;h&quot;); lol(x); println!(&quot;{}!&quot;,x)</code>","position":{"start":{"line":17,"column":224,"offset":2572},"end":{"line":17,"column":278,"offset":2626},"indent":[]}},{"type":"text","value":" , then we’d also have a compiler error, as ","position":{"start":{"line":17,"column":278,"offset":2626},"end":{"line":17,"column":322,"offset":2670},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lol</code>","position":{"start":{"line":17,"column":322,"offset":2670},"end":{"line":17,"column":327,"offset":2675},"indent":[]}},{"type":"text","value":" owned the string and finished its lifetime, deallocating x.","position":{"start":{"line":17,"column":327,"offset":2675},"end":{"line":17,"column":387,"offset":2735},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":2351},"end":{"line":17,"column":387,"offset":2735},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":2349},"end":{"line":17,"column":387,"offset":2735},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1588},"end":{"line":17,"column":387,"offset":2735},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, while Rust is a clear example of how careful logic and reasoning can lead us to having better programming models that allow speed and logical clarity, we need to contend with this new concept of ","position":{"start":{"line":19,"column":1,"offset":2737},"end":{"line":19,"column":202,"offset":2938},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ownership transfer</code>","position":{"start":{"line":19,"column":202,"offset":2938},"end":{"line":19,"column":222,"offset":2958},"indent":[]}},{"type":"text","value":"  to compensate. (This is really similar to how, by splitting up Haskell into a pure language and a command language to separate functional and imperative programming, we gain a feature, easy reasoning, we make writing our program slightly harder, as we have to understand the I/O Monad type and remember to structure our programs to make use of it, rather than allowing print statements everywhere like Python)","position":{"start":{"line":19,"column":222,"offset":2958},"end":{"line":19,"column":633,"offset":3369},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":2737},"end":{"line":19,"column":633,"offset":3369},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, how do users of Rust cope with what seems like deal-breakers? Through ","position":{"start":{"line":21,"column":1,"offset":3371},"end":{"line":21,"column":75,"offset":3445},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"borrowing.","position":{"start":{"line":21,"column":77,"offset":3447},"end":{"line":21,"column":87,"offset":3457},"indent":[]}}],"position":{"start":{"line":21,"column":75,"offset":3445},"end":{"line":21,"column":89,"offset":3459},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":3371},"end":{"line":21,"column":89,"offset":3459},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":23,"column":1,"offset":3461},"end":{"line":23,"column":4,"offset":3464},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Borrowing","position":{"start":{"line":25,"column":5,"offset":3470},"end":{"line":25,"column":14,"offset":3479},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":3466},"end":{"line":25,"column":14,"offset":3479},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Rust, instead of creating functions that take in heap-allocated memory directly, we can create functions that take in heap-allocated string ","position":{"start":{"line":27,"column":1,"offset":3481},"end":{"line":27,"column":144,"offset":3624},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"references","position":{"start":{"line":27,"column":146,"offset":3626},"end":{"line":27,"column":156,"offset":3636},"indent":[]}}],"position":{"start":{"line":27,"column":144,"offset":3624},"end":{"line":27,"column":158,"offset":3638},"indent":[]}},{"type":"text","value":". By doing so, Rust will not give ownership to the function; instead, it will allow the function to ","position":{"start":{"line":27,"column":158,"offset":3638},"end":{"line":27,"column":258,"offset":3738},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"borrow","position":{"start":{"line":27,"column":260,"offset":3740},"end":{"line":27,"column":266,"offset":3746},"indent":[]}}],"position":{"start":{"line":27,"column":258,"offset":3738},"end":{"line":27,"column":268,"offset":3748},"indent":[]}},{"type":"text","value":" ownership of the data allocated for the duration of the function, after which the owner transfers back to the original variable.  Thus, if we have the following code:","position":{"start":{"line":27,"column":268,"offset":3748},"end":{"line":27,"column":435,"offset":3915},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":3481},"end":{"line":27,"column":435,"offset":3915},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">make_greeting</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, {}!\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">make_footer</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span><span class=\"token operator\">&amp;</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sincerely, {}\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cyrus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token function\">make_greeting</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> footer <span class=\"token operator\">=</span> <span class=\"token function\">make_footer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":3917},"end":{"line":41,"column":4,"offset":4163},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This all works for a few reasons:","position":{"start":{"line":43,"column":1,"offset":4165},"end":{"line":43,"column":34,"offset":4198},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":4165},"end":{"line":43,"column":34,"offset":4198},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Firstly, make","position":{"start":{"line":45,"column":3,"offset":4202},"end":{"line":45,"column":16,"offset":4215},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"greeting and make","position":{"start":{"line":45,"column":17,"offset":4216},"end":{"line":45,"column":34,"offset":4233},"indent":[]}}],"position":{"start":{"line":45,"column":16,"offset":4215},"end":{"line":45,"column":35,"offset":4234},"indent":[]}},{"type":"text","value":"footer take in all of this data as references. Thus, they do not take ownership away from s at any point, allowing us to call functions on s as many times as we like.","position":{"start":{"line":45,"column":35,"offset":4234},"end":{"line":45,"column":201,"offset":4400},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":4202},"end":{"line":45,"column":201,"offset":4400},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":4200},"end":{"line":45,"column":201,"offset":4400},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Secondly, format!, and other functions that end in ","position":{"start":{"line":46,"column":3,"offset":4403},"end":{"line":46,"column":54,"offset":4454},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">!</code>","position":{"start":{"line":46,"column":54,"offset":4454},"end":{"line":46,"column":57,"offset":4457},"indent":[]}},{"type":"text","value":" in Rust, are not really functions, but compiler macros. When the compiler encounters them, they simply replace these nicer functions with implementations that preserve ownership semantics (i.e. they take in references to s, so they simply borrow the data)","position":{"start":{"line":46,"column":57,"offset":4457},"end":{"line":46,"column":313,"offset":4713},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":4403},"end":{"line":46,"column":313,"offset":4713},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":4401},"end":{"line":46,"column":313,"offset":4713},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":4200},"end":{"line":46,"column":313,"offset":4713},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, we’re able to call functions multiple times and do fancy stuff, without explicitly needing to handle ownership at every point. Thanks Rust!","position":{"start":{"line":48,"column":1,"offset":4715},"end":{"line":48,"column":146,"offset":4860},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":4715},"end":{"line":48,"column":146,"offset":4860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With the recap over with, let’s go and get to the new content. We’ll cover some new material regarding references, Rust’s sum and product types, mutability and concurrency, and Rust’s lifetime system.","position":{"start":{"line":50,"column":1,"offset":4862},"end":{"line":50,"column":201,"offset":5062},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":4862},"end":{"line":50,"column":201,"offset":5062},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":52,"column":1,"offset":5064},"end":{"line":52,"column":4,"offset":5067},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"References, Redux","position":{"start":{"line":54,"column":5,"offset":5073},"end":{"line":54,"column":22,"offset":5090},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":5069},"end":{"line":54,"column":22,"offset":5090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, now that we believe we have the idea of references down, let’s test our understanding by trying to write a program in Rust. From our C++ perspective, it seems like the following code should work:","position":{"start":{"line":56,"column":1,"offset":5092},"end":{"line":56,"column":200,"offset":5291},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":5092},"end":{"line":56,"column":200,"offset":5291},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Dynamically allocate hello</span>\n  <span class=\"token operator\">&amp;</span>s <span class=\"token comment\">// Transfer a reference to this hello to the caller</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":58,"column":1,"offset":5293},"end":{"line":63,"column":4,"offset":5435},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In C++, this sort of function should work, as we’re simply allocating some memory and returning it to us via a reference, where we’ll then use it and de-allocate it like responsible programmers. ","position":{"start":{"line":65,"column":1,"offset":5437},"end":{"line":65,"column":196,"offset":5632},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":5437},"end":{"line":65,"column":196,"offset":5632},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"However, this actually results in a compiler error! Can you spot the problem?","position":{"start":{"line":67,"column":1,"offset":5634},"end":{"line":67,"column":78,"offset":5711},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":5634},"end":{"line":67,"column":78,"offset":5711},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The problem here comes from the fact that ","position":{"start":{"line":69,"column":1,"offset":5713},"end":{"line":69,"column":43,"offset":5755},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&amp;s</code>","position":{"start":{"line":69,"column":43,"offset":5755},"end":{"line":69,"column":47,"offset":5759},"indent":[]}},{"type":"text","value":" does not own ","position":{"start":{"line":69,"column":47,"offset":5759},"end":{"line":69,"column":61,"offset":5773},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hello</code>","position":{"start":{"line":69,"column":61,"offset":5773},"end":{"line":69,"column":68,"offset":5780},"indent":[]}},{"type":"text","value":" ; it’s merely a reference to the data owned by ","position":{"start":{"line":69,"column":68,"offset":5780},"end":{"line":69,"column":116,"offset":5828},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":69,"column":116,"offset":5828},"end":{"line":69,"column":119,"offset":5831},"indent":[]}},{"type":"text","value":" . As a result, when ","position":{"start":{"line":69,"column":119,"offset":5831},"end":{"line":69,"column":140,"offset":5852},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">s</code>","position":{"start":{"line":69,"column":140,"offset":5852},"end":{"line":69,"column":143,"offset":5855},"indent":[]}},{"type":"text","value":" dies, the memory associated with ","position":{"start":{"line":69,"column":143,"offset":5855},"end":{"line":69,"column":177,"offset":5889},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&amp;s</code>","position":{"start":{"line":69,"column":177,"offset":5889},"end":{"line":69,"column":181,"offset":5893},"indent":[]}},{"type":"text","value":" dies, and so Rust complains, as the lifetime of ","position":{"start":{"line":69,"column":181,"offset":5893},"end":{"line":69,"column":230,"offset":5942},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&amp;s</code>","position":{"start":{"line":69,"column":230,"offset":5942},"end":{"line":69,"column":234,"offset":5946},"indent":[]}},{"type":"text","value":" is larger than the owner, which would lead to a double free error. ","position":{"start":{"line":69,"column":234,"offset":5946},"end":{"line":69,"column":302,"offset":6014},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":5713},"end":{"line":69,"column":302,"offset":6014},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, formally, there’s a rule we need to follow when it comes to (immutable) references in Rust:","position":{"start":{"line":71,"column":1,"offset":6016},"end":{"line":71,"column":98,"offset":6113},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":6016},"end":{"line":71,"column":98,"offset":6113},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"References can’t outlive the owner of the resource they refer to, to prevent double-free errors.","position":{"start":{"line":73,"column":1,"offset":6115},"end":{"line":73,"column":97,"offset":6211},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":6115},"end":{"line":73,"column":97,"offset":6211},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, while we can have resources borrowed by called functions, we cannot have those references outlive our owner, as that would lead to undeterminable behavior, something as language designers we strive to prevent.","position":{"start":{"line":75,"column":1,"offset":6213},"end":{"line":75,"column":216,"offset":6428},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":6213},"end":{"line":75,"column":216,"offset":6428},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":77,"column":1,"offset":6430},"end":{"line":77,"column":4,"offset":6433},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Product Type in Rust: Structs","position":{"start":{"line":79,"column":5,"offset":6439},"end":{"line":79,"column":38,"offset":6472},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":6435},"end":{"line":79,"column":38,"offset":6472},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Rust, Structs serve as a product type. So, as an example, we could have a User struct:","position":{"start":{"line":81,"column":1,"offset":6474},"end":{"line":81,"column":90,"offset":6563},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":6474},"end":{"line":81,"column":90,"offset":6563},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">Struct User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   username<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n   email<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span>\n   is_active<span class=\"token punctuation\">:</span> bool\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":83,"column":1,"offset":6565},"end":{"line":90,"column":4,"offset":6654},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and then create a User, in the following way:","position":{"start":{"line":92,"column":1,"offset":6656},"end":{"line":92,"column":46,"offset":6701},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":6656},"end":{"line":92,"column":46,"offset":6701},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> User <span class=\"token punctuation\">{</span>\n    username <span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar@umich.edu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    is_active<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":94,"column":1,"offset":6703},"end":{"line":100,"column":4,"offset":6836},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As a side-note, structs must be defined before they can be created in Rust. If you’ve been through 370 by now, this is similar to C, where we need to have definitions before they are used. ","position":{"start":{"line":102,"column":1,"offset":6838},"end":{"line":102,"column":190,"offset":7027},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":6838},"end":{"line":102,"column":190,"offset":7027},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While this might seem like normal behavior for all languages, be aware that there are language where this is not the case. To see an example of such a ‘feature’, simply look up “JavaScript Hoisting” when you get a chance.","position":{"start":{"line":104,"column":1,"offset":7029},"end":{"line":104,"column":222,"offset":7250},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":7029},"end":{"line":104,"column":222,"offset":7250},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In terms of owning heap-allocated data, structs in Rust ","position":{"start":{"line":106,"column":1,"offset":7252},"end":{"line":106,"column":57,"offset":7308},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"own","position":{"start":{"line":106,"column":59,"offset":7310},"end":{"line":106,"column":62,"offset":7313},"indent":[]}}],"position":{"start":{"line":106,"column":57,"offset":7308},"end":{"line":106,"column":64,"offset":7315},"indent":[]}},{"type":"text","value":" their fields. So, in this case, the variable ","position":{"start":{"line":106,"column":64,"offset":7315},"end":{"line":106,"column":110,"offset":7361},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">me</code>","position":{"start":{"line":106,"column":110,"offset":7361},"end":{"line":106,"column":114,"offset":7365},"indent":[]}},{"type":"text","value":" owns the dynamic data contained in the fields ","position":{"start":{"line":106,"column":114,"offset":7365},"end":{"line":106,"column":161,"offset":7412},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">username</code>","position":{"start":{"line":106,"column":161,"offset":7412},"end":{"line":106,"column":171,"offset":7422},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":106,"column":171,"offset":7422},"end":{"line":106,"column":176,"offset":7427},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">email</code>","position":{"start":{"line":106,"column":176,"offset":7427},"end":{"line":106,"column":183,"offset":7434},"indent":[]}},{"type":"text","value":", even if you need to write ","position":{"start":{"line":106,"column":183,"offset":7434},"end":{"line":106,"column":211,"offset":7462},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">me.username</code>","position":{"start":{"line":106,"column":211,"offset":7462},"end":{"line":106,"column":224,"offset":7475},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":106,"column":224,"offset":7475},"end":{"line":106,"column":229,"offset":7480},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[me.email](http://me.email)</code>","position":{"start":{"line":106,"column":229,"offset":7480},"end":{"line":106,"column":258,"offset":7509},"indent":[]}},{"type":"text","value":" to access the data.","position":{"start":{"line":106,"column":258,"offset":7509},"end":{"line":106,"column":278,"offset":7529},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":7252},"end":{"line":106,"column":278,"offset":7529},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":108,"column":1,"offset":7531},"end":{"line":108,"column":4,"offset":7534},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Sum Type in Rust: Enums","position":{"start":{"line":110,"column":5,"offset":7540},"end":{"line":110,"column":32,"offset":7567},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":7536},"end":{"line":110,"column":32,"offset":7567},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is a quick aside by Cyrus. You can probably safely skip this","position":{"start":{"line":112,"column":1,"offset":7569},"end":{"line":112,"column":66,"offset":7634},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":7569},"end":{"line":112,"column":66,"offset":7634},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Similarly, we could also define Sum Types in Rust, which are called “Enums”. ","position":{"start":{"line":114,"column":1,"offset":7636},"end":{"line":114,"column":78,"offset":7713},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":7636},"end":{"line":114,"column":78,"offset":7713},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We define them through the following syntax","position":{"start":{"line":116,"column":1,"offset":7715},"end":{"line":116,"column":44,"offset":7758},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":7715},"end":{"line":116,"column":44,"offset":7758},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> Bread <span class=\"token punctuation\">{</span> \n   White<span class=\"token punctuation\">,</span> Wheat<span class=\"token punctuation\">,</span> <span class=\"token function\">Multi</span><span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":118,"column":1,"offset":7760},"end":{"line":122,"column":4,"offset":7815},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, in this case, we simply have three types of Bread: White, Wheat, and Multi, which is a type constructor that needs a 32-bit integer to exist.","position":{"start":{"line":124,"column":1,"offset":7817},"end":{"line":124,"column":148,"offset":7964},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":7817},"end":{"line":124,"column":148,"offset":7964},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can also pattern match on these values, using the following syntax:","position":{"start":{"line":126,"column":1,"offset":7966},"end":{"line":126,"column":71,"offset":8036},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":7966},"end":{"line":126,"column":71,"offset":8036},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">match</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   White <span class=\"token operator\">=></span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">,</span> Wheat <span class=\"token operator\">=></span> <span class=\"token punctuation\">...</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Multi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":128,"column":1,"offset":8038},"end":{"line":132,"column":4,"offset":8111},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And, like Product Types above, the Sum Type owns any dynamically allocated data in it, so in this case if we had a name option type:","position":{"start":{"line":134,"column":1,"offset":8113},"end":{"line":134,"column":133,"offset":8245},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":8113},"end":{"line":134,"column":133,"offset":8245},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> NameOpt <span class=\"token punctuation\">{</span>\n   Nil<span class=\"token punctuation\">,</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> NameOpt<span class=\"token punctuation\">::</span><span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">::</span><span class=\"token function\">From</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":136,"column":1,"offset":8247},"end":{"line":141,"column":4,"offset":8346},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then myName would own the String ‘Arav’.","position":{"start":{"line":143,"column":1,"offset":8348},"end":{"line":143,"column":41,"offset":8388},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":8348},"end":{"line":143,"column":41,"offset":8388},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":145,"column":1,"offset":8390},"end":{"line":145,"column":4,"offset":8393},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Mutability: Part Deux","position":{"start":{"line":147,"column":5,"offset":8399},"end":{"line":147,"column":26,"offset":8420},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":8395},"end":{"line":147,"column":26,"offset":8420},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With these language features in mind, let’s return to mutability. So, if we remember, we need to use the ","position":{"start":{"line":149,"column":1,"offset":8422},"end":{"line":149,"column":106,"offset":8527},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mut</code>","position":{"start":{"line":149,"column":106,"offset":8527},"end":{"line":149,"column":111,"offset":8532},"indent":[]}},{"type":"text","value":" keyword to declare an owner to a mutable value, and we also need to use ","position":{"start":{"line":149,"column":111,"offset":8532},"end":{"line":149,"column":184,"offset":8605},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mut</code>","position":{"start":{"line":149,"column":184,"offset":8605},"end":{"line":149,"column":189,"offset":8610},"indent":[]}},{"type":"text","value":" to declare a mutable reference. ","position":{"start":{"line":149,"column":189,"offset":8610},"end":{"line":149,"column":222,"offset":8643},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":8422},"end":{"line":149,"column":222,"offset":8643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When we have structs in Rust, then, we’ll need to make sure we have defined fields to be mutable, as fields can only be mutated in very specific ways. As an example, let’s say we had the following code:","position":{"start":{"line":151,"column":1,"offset":8645},"end":{"line":151,"column":203,"offset":8847},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":8645},"end":{"line":151,"column":203,"offset":8847},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> User <span class=\"token punctuation\">{</span>\n    username <span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar@umich.edu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    is_active<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":153,"column":1,"offset":8849},"end":{"line":159,"column":4,"offset":8982},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and then ran the following code:","position":{"start":{"line":161,"column":1,"offset":8984},"end":{"line":161,"column":33,"offset":9016},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":8984},"end":{"line":161,"column":33,"offset":9016},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">me<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cyrus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":163,"column":1,"offset":9018},"end":{"line":165,"column":4,"offset":9066},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This will lead to a compiler error, as me is an immutable object because we haven’t used the ","position":{"start":{"line":167,"column":1,"offset":9068},"end":{"line":167,"column":94,"offset":9161},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mut</code>","position":{"start":{"line":167,"column":94,"offset":9161},"end":{"line":167,"column":99,"offset":9166},"indent":[]}},{"type":"text","value":" keyword.","position":{"start":{"line":167,"column":99,"offset":9166},"end":{"line":167,"column":108,"offset":9175},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":9068},"end":{"line":167,"column":108,"offset":9175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"However, if we did the following:","position":{"start":{"line":169,"column":1,"offset":9177},"end":{"line":169,"column":34,"offset":9210},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":9177},"end":{"line":169,"column":34,"offset":9210},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> me <span class=\"token operator\">=</span> User <span class=\"token punctuation\">{</span>\n    username <span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar@umich.edu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    is_active<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nme<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cyrus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":171,"column":1,"offset":9212},"end":{"line":179,"column":4,"offset":9387},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This now works, as the owner dictates that the data is mutable, and so we can mutate the fields accordingly. What happens here is that, when the username field points to new data, it drops the old field data, deallocating it, which makes sense, as we essentially force that data to have no owner.","position":{"start":{"line":181,"column":1,"offset":9389},"end":{"line":181,"column":297,"offset":9685},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":9389},"end":{"line":181,"column":297,"offset":9685},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now let’s say we have some mutable object, ","position":{"start":{"line":183,"column":1,"offset":9687},"end":{"line":183,"column":44,"offset":9730},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">me</code>","position":{"start":{"line":183,"column":44,"offset":9730},"end":{"line":183,"column":48,"offset":9734},"indent":[]}},{"type":"text","value":", and try to run the following function:","position":{"start":{"line":183,"column":48,"offset":9734},"end":{"line":183,"column":88,"offset":9774},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":9687},"end":{"line":183,"column":88,"offset":9774},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   user<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cyrus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":185,"column":1,"offset":9776},"end":{"line":189,"column":4,"offset":9851},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"where, as a side note, ","position":{"start":{"line":191,"column":1,"offset":9853},"end":{"line":191,"column":24,"offset":9876},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user.username</code>","position":{"start":{"line":191,"column":24,"offset":9876},"end":{"line":191,"column":39,"offset":9891},"indent":[]}},{"type":"text","value":" is simply syntactic sugar for ","position":{"start":{"line":191,"column":39,"offset":9891},"end":{"line":191,"column":70,"offset":9922},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">(* user).username</code>","position":{"start":{"line":191,"column":70,"offset":9922},"end":{"line":191,"column":89,"offset":9941},"indent":[]}},{"type":"text","value":" , as that’s generally more readable.","position":{"start":{"line":191,"column":89,"offset":9941},"end":{"line":191,"column":126,"offset":9978},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":9853},"end":{"line":191,"column":126,"offset":9978},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Well, believe it or not, but Rust complains yet again.","position":{"start":{"line":193,"column":1,"offset":9980},"end":{"line":193,"column":55,"offset":10034},"indent":[]}}],"position":{"start":{"line":193,"column":1,"offset":9980},"end":{"line":193,"column":55,"offset":10034},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is simply because, although the owner is mutable, we only passed the data in through an immutable reference, ","position":{"start":{"line":195,"column":1,"offset":10036},"end":{"line":195,"column":115,"offset":10150},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&amp;User</code>","position":{"start":{"line":195,"column":115,"offset":10150},"end":{"line":195,"column":122,"offset":10157},"indent":[]}},{"type":"text","value":" . If, instead, we used ","position":{"start":{"line":195,"column":122,"offset":10157},"end":{"line":195,"column":146,"offset":10181},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&amp;mut User</code>","position":{"start":{"line":195,"column":146,"offset":10181},"end":{"line":195,"column":157,"offset":10192},"indent":[]}},{"type":"text","value":" , we’d get a mutable borrow of our data, allowing us to mutate the data again.","position":{"start":{"line":195,"column":157,"offset":10192},"end":{"line":195,"column":236,"offset":10271},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":10036},"end":{"line":195,"column":236,"offset":10271},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"While this does make sense from a purely syntactic viewpoint, the main reason why Rust enforces this constraint is so it can do some automatic parallelism for you. If two functions, ","position":{"start":{"line":197,"column":1,"offset":10273},"end":{"line":197,"column":183,"offset":10455},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">length(&amp;me)</code>","position":{"start":{"line":197,"column":183,"offset":10455},"end":{"line":197,"column":196,"offset":10468},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":197,"column":196,"offset":10468},"end":{"line":197,"column":201,"offset":10473},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user(&amp;me)</code>","position":{"start":{"line":197,"column":201,"offset":10473},"end":{"line":197,"column":212,"offset":10484},"indent":[]}},{"type":"text","value":" are ran next to each other, then we can schedule them concurrently without needing to worry about concurrency problems, speeding up your program!","position":{"start":{"line":197,"column":212,"offset":10484},"end":{"line":197,"column":358,"offset":10630},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":10273},"end":{"line":197,"column":358,"offset":10630},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Now, while this  is all fine and dandy, there is one caveat added by adding mutable borrows to the language: ","position":{"start":{"line":199,"column":1,"offset":10632},"end":{"line":199,"column":110,"offset":10741},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":10632},"end":{"line":199,"column":110,"offset":10741},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":201,"column":1,"offset":10743},"end":{"line":201,"column":4,"offset":10746},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Rust only allows one live mutable borrow to exist any point in time and, if there’s a mutable borrow, there cannot be any immutable borrows. In fact, the owner itself can read or write while a mutable borrow is in action.","position":{"start":{"line":203,"column":3,"offset":10750},"end":{"line":203,"column":224,"offset":10971},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":10748},"end":{"line":203,"column":226,"offset":10973},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":10748},"end":{"line":203,"column":226,"offset":10973},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":205,"column":1,"offset":10975},"end":{"line":205,"column":4,"offset":10978},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, for example, the following code does not compile:","position":{"start":{"line":207,"column":1,"offset":10980},"end":{"line":207,"column":54,"offset":11033},"indent":[]}}],"position":{"start":{"line":207,"column":1,"offset":10980},"end":{"line":207,"column":54,"offset":11033},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> me <span class=\"token operator\">=</span> User <span class=\"token punctuation\">{</span>\n    username <span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comar@umich.edu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    is_active<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> me<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> me<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>me<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":209,"column":1,"offset":11035},"end":{"line":221,"column":4,"offset":11250},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As Rust recognizes that, if it tries to schedule any usage of ","position":{"start":{"line":223,"column":1,"offset":11252},"end":{"line":223,"column":63,"offset":11314},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r</code>","position":{"start":{"line":223,"column":63,"offset":11314},"end":{"line":223,"column":66,"offset":11317},"indent":[]}},{"type":"text","value":" , ","position":{"start":{"line":223,"column":66,"offset":11317},"end":{"line":223,"column":69,"offset":11320},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r2</code>","position":{"start":{"line":223,"column":69,"offset":11320},"end":{"line":223,"column":73,"offset":11324},"indent":[]}},{"type":"text","value":" , or ","position":{"start":{"line":223,"column":73,"offset":11324},"end":{"line":223,"column":79,"offset":11330},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">length</code>","position":{"start":{"line":223,"column":79,"offset":11330},"end":{"line":223,"column":87,"offset":11338},"indent":[]}},{"type":"text","value":" concurrently, then we’ll have problems, as those mutable borrows might influence the immutable borrow or each other, depending on how the CPU scheduler operates. (Though you can change this through a lock, or any other mutex operation).","position":{"start":{"line":223,"column":87,"offset":11338},"end":{"line":223,"column":324,"offset":11575},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":11252},"end":{"line":223,"column":324,"offset":11575},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For more information about the CPU scheduler, and for a better understanding of why we need all of this in the first place, either take EECS 482, take EECS 482, or take EECS 482. If you’re impatient like me, then schedule yourself to take EECS482 next semester, AND also read “Operating Systems: Three Easy Pieces”, a set of lecture notes which goes into some really good descriptions on all of this. (It’s legally free through the instructor’s website!)","position":{"start":{"line":225,"column":1,"offset":11577},"end":{"line":225,"column":455,"offset":12031},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":11577},"end":{"line":225,"column":455,"offset":12031},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"http://pages.cs.wisc.edu/~remzi/OSTEP/","children":[{"type":"text","value":"Operating Systems: Three Easy Pieces","position":{"start":{"line":227,"column":2,"offset":12034},"end":{"line":227,"column":38,"offset":12070},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":12033},"end":{"line":227,"column":79,"offset":12111},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":12033},"end":{"line":227,"column":79,"offset":12111},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this way, Rust keeps you from making the hardest of bugs happen,  concurrency-related bugs, with the minimal cost that you learn how to program with those issues in mind. In this manner, Rust  allows us to get the benefits of parallelism and concurrency, without the trouble that’s usually caused by it.","position":{"start":{"line":229,"column":1,"offset":12113},"end":{"line":229,"column":307,"offset":12419},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":12113},"end":{"line":229,"column":307,"offset":12419},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":231,"column":1,"offset":12421},"end":{"line":231,"column":4,"offset":12424},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Work of a Lifetime: Rust’s Lifetime System","position":{"start":{"line":233,"column":5,"offset":12430},"end":{"line":233,"column":51,"offset":12476},"indent":[]}}],"position":{"start":{"line":233,"column":1,"offset":12426},"end":{"line":233,"column":51,"offset":12476},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We’ve been a bit careless about how Rust handles when objects die, only stating that it happens and, when it does, the memory associated with any heap-object owned by those objects gets deallocated from memory. Now, we’ll take a more careful look into how Rust actually handles lifetime. ","position":{"start":{"line":235,"column":1,"offset":12478},"end":{"line":235,"column":289,"offset":12766},"indent":[]}}],"position":{"start":{"line":235,"column":1,"offset":12478},"end":{"line":235,"column":289,"offset":12766},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Originally, Rust had the lifetime of objects be simply the scope that they were defined in. Thus, variables exist only for the scope that something is defined in, an idea called ","position":{"start":{"line":237,"column":1,"offset":12768},"end":{"line":237,"column":179,"offset":12946},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"lexical scope:","position":{"start":{"line":237,"column":180,"offset":12947},"end":{"line":237,"column":194,"offset":12961},"indent":[]}}],"position":{"start":{"line":237,"column":179,"offset":12946},"end":{"line":237,"column":195,"offset":12962},"indent":[]}}],"position":{"start":{"line":237,"column":1,"offset":12768},"end":{"line":237,"column":195,"offset":12962},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Lexical Scope: The idea that, after a block, variables are deallocated.","position":{"start":{"line":239,"column":3,"offset":12966},"end":{"line":239,"column":74,"offset":13037},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":12964},"end":{"line":239,"column":76,"offset":13039},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":12964},"end":{"line":239,"column":76,"offset":13039},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, if we had the following code in Rust:","position":{"start":{"line":241,"column":1,"offset":13041},"end":{"line":241,"column":44,"offset":13084},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":13041},"end":{"line":241,"column":44,"offset":13084},"indent":[]}},{"type":"html","lang":"rust","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token punctuation\">{</span> \n <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> me <span class=\"token operator\">=</span> User <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> me<span class=\"token punctuation\">;</span>\n <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> r2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>me<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":243,"column":1,"offset":13086},"end":{"line":251,"column":4,"offset":13187},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then the second to last line would cause a compiler error, as ","position":{"start":{"line":253,"column":1,"offset":13189},"end":{"line":253,"column":63,"offset":13251},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r</code>","position":{"start":{"line":253,"column":63,"offset":13251},"end":{"line":253,"column":66,"offset":13254},"indent":[]}},{"type":"text","value":", as a mutable reference, is still alive, and we cannot have ","position":{"start":{"line":253,"column":66,"offset":13254},"end":{"line":253,"column":127,"offset":13315},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r2</code>","position":{"start":{"line":253,"column":127,"offset":13315},"end":{"line":253,"column":131,"offset":13319},"indent":[]}},{"type":"text","value":", an immutable reference, exist when ","position":{"start":{"line":253,"column":131,"offset":13319},"end":{"line":253,"column":168,"offset":13356},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r</code>","position":{"start":{"line":253,"column":168,"offset":13356},"end":{"line":253,"column":171,"offset":13359},"indent":[]}},{"type":"text","value":" does. ","position":{"start":{"line":253,"column":171,"offset":13359},"end":{"line":253,"column":178,"offset":13366},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":13189},"end":{"line":253,"column":178,"offset":13366},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"However, this is kinda annoying, as we just want to mutate me using r in ","position":{"start":{"line":255,"column":1,"offset":13368},"end":{"line":255,"column":74,"offset":13441},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">f(r)</code>","position":{"start":{"line":255,"column":74,"offset":13441},"end":{"line":255,"column":80,"offset":13447},"indent":[]}},{"type":"text","value":" , and so we need to do some work to change our idea of the code into reality, which can be annoying for simple tasks and potentially destructive for complex tasks.","position":{"start":{"line":255,"column":80,"offset":13447},"end":{"line":255,"column":244,"offset":13611},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":13368},"end":{"line":255,"column":244,"offset":13611},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thus, in order to cope with the annoyance, Rust has created so-called ","position":{"start":{"line":257,"column":1,"offset":13613},"end":{"line":257,"column":71,"offset":13683},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Non-lexical lifetimes</code>","position":{"start":{"line":257,"column":71,"offset":13683},"end":{"line":257,"column":94,"offset":13706},"indent":[]}},{"type":"text","value":"  , where a variable’s lifetime ends at its last use. Thus, the code above works if you’re using Rust’s non-lexical lifetime , as ","position":{"start":{"line":257,"column":94,"offset":13706},"end":{"line":257,"column":224,"offset":13836},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r</code>","position":{"start":{"line":257,"column":224,"offset":13836},"end":{"line":257,"column":227,"offset":13839},"indent":[]}},{"type":"text","value":" ’s last use is before any mention of ","position":{"start":{"line":257,"column":227,"offset":13839},"end":{"line":257,"column":265,"offset":13877},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r2</code>","position":{"start":{"line":257,"column":265,"offset":13877},"end":{"line":257,"column":269,"offset":13881},"indent":[]}},{"type":"text","value":" , even if ","position":{"start":{"line":257,"column":269,"offset":13881},"end":{"line":257,"column":280,"offset":13892},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">r</code>","position":{"start":{"line":257,"column":280,"offset":13892},"end":{"line":257,"column":283,"offset":13895},"indent":[]}},{"type":"text","value":" is still in scope.","position":{"start":{"line":257,"column":283,"offset":13895},"end":{"line":257,"column":302,"offset":13914},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":13613},"end":{"line":257,"column":302,"offset":13914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This increases Rust’s flexibility, especially with short-lived mutable borrows.","position":{"start":{"line":259,"column":1,"offset":13916},"end":{"line":259,"column":80,"offset":13995},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":13916},"end":{"line":259,"column":80,"offset":13995},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":259,"column":80,"offset":13995}}}}